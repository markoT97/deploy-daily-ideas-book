{"version":3,"sources":["redux-store/ideasList/types.tsx","redux-store/ideasList/actions.tsx","shared/constants/variables.js","firebase/firebase.js","redux-store/categoriesList/actions.tsx","redux-store/categoriesList/types.tsx","components/Navigation/index.tsx","shared/constants/routes.js","shared/validation-schemas.tsx","redux-store/modals/actions.tsx","redux-store/modals/types.tsx","components/InsertIdeaModal/InsertIdeaForm.tsx","components/InsertIdeaModal/index.tsx","components/UpdateIdeaModal/UpdateIdeaForm.tsx","components/UpdateIdeaModal/index.tsx","components/RemoveIdeaConfirmationModal/index.tsx","components/IdeasList/ContextAwareToggle.tsx","components/IdeasList/index.tsx","components/InsertCategoryModal/InsertCategoryForm.tsx","components/InsertCategoryModal/index.tsx","components/UpdateCategoryModal/UpdateCategoryForm.tsx","components/UpdateCategoryModal/index.tsx","components/RemoveCategoryConfirmationModal/index.tsx","components/CategoriesList/index.tsx","components/App/Routes.tsx","components/App/index.tsx","serviceWorker.ts","redux-store/ideasList/reducers.tsx","firebase/models/CategoryModel.tsx","redux-store/modals/reducers.tsx","firebase/models/IdeaModel.tsx","redux-store/categoriesList/reducers.tsx","redux-store/index.tsx","index.tsx"],"names":["defaultFilterParamPayload","filterColumnName","filterColumnValue","id","name","setIdeas","ideas","type","payload","setFilterParam","filters","setSelectedDate","date","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","FirebaseContext","createContext","children","firebase","app","database","apps","length","initializeApp","api","getIdeas","filterColumnValueId","searchColumnName","searchColumnValue","ideasRef","off","selectedDate","fromUnixTime","endOfTheDayTimestamp","getUnixTime","endOfDay","orderByChild","startAt","Number","endAt","on","snapIdeas","a","items","val","aggregateIdeasAndCategories","newItemsState","dispatch","equalTo","toLowerCase","toUpperCase","postIdea","idea","push","putIdea","child","update","deleteIdea","remove","getCategories","postCategory","category","categoriesRef","putCategory","deleteCategory","useDispatch","dbRef","ref","item","fieldById","categoryRef","once","snapCategory","categoryName","createdAt","descriptionAbout","descriptionExpectations","rating","serialNumber","shortenedName","snap","Provider","value","Navigation","timer","useSelector","state","ideasList","filterValueId","searchValue","search","useContext","isFilterApplied","undefined","useEffect","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","className","Form","inline","role","size","onClick","onChange","timestampString","toString","format","filterByDate","maxDate","Date","clearIcon","InputGroup","FormControl","placeholder","e","columnName","target","clearTimeout","setTimeout","setSearchValue","disabled","Append","Text","ideaValidationSchema","Yup","max","label","required","min","categoryValidationSchema","setInsertIdeaModal","visibility","setUpdateIdeaModalVisibility","setRemoveIdeaModal","isRemoveModalShown","setInsertCategoryModal","setUpdateCategoryModalVisibility","setRemoveCategoryModal","IdeaForm","categories","categoriesList","initialValues","validationSchema","onSubmit","values","completeObject","addIdea","errors","touched","dirty","handleChange","handleBlur","handleSubmit","setFieldValue","isValid","Group","Label","Control","rows","onBlur","isInvalid","Feedback","map","option","i","key","Row","Col","starCount","renderStarIcon","onStarClick","number","Button","variant","InsertIdeaModal","props","Modal","aria-labelledby","centered","Header","closeButton","Title","Body","InsertIdeaForm","selectedIdea","modals","updateIdea","selectedIdeaId","UpdateIdeaModal","UpdateIdeaForm","RemoveIdeaConfirmationModal","removeIdeaId","removeIdea","ContextAwareToggle","eventKey","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","isCurrentEventKey","IdeaBar","isInsertModalShown","insertIdea","isUpdateModalShown","isIdeaModalShown","filterValueName","isSearchApplied","renderTooltip","Tooltip","title","categoryColors","Education","Work","Entertainment","Travel","show","onHide","Badge","Accordion","defaultActiveKey","timestamp","ideaId","categoryId","Card","border","xs","lg","OverlayTrigger","placement","delay","hide","overlay","filterByCategory","sm","editing","showUpdateIdeaModal","Spinner","animation","CategoryForm","InsertCategoryModal","InsertCategoryForm","selectedCategory","updateCategory","selectedCategoryId","UpdateCategoryModal","UpdateCategoryForm","RemoveCategoryConfirmationModal","removeCategoryId","removeCategory","CategoryBar","insertCategory","isCategoryModalShown","showUpdateCategoryModal","Routes","exact","path","component","IdeasList","CategoriesList","App","Container","Boolean","window","location","hostname","match","initialState","ideasReducer","action","defaultCategoryModel","modalsReducer","categoriesReducer","rootReducer","combineReducers","ideasListReducer","composeEnhancers","composeWithDevTools","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+VA2CaA,EAAoD,CAC/DC,iBAAkB,GAClBC,kBAAmB,CAAEC,GAAI,GAAIC,KAAM,KClC9B,SAASC,EAASC,GACvB,MAAO,CACLC,KDNqB,YCOrBC,QAASF,GAIN,SAASG,EAAeC,GAC7B,MAAO,CACLH,KDZ4B,mBCa5BC,QAASE,GAkBN,SAASC,EAAgBC,GAC9B,MAAO,CACLL,KD9B6B,oBC+B7BC,QAASI,G,yHC1CN,I,kBCYDC,EAAS,CACbC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBAGXC,EAAkBC,wBAAc,MAGvB,cAAmB,IAAhBC,EAAe,EAAfA,SACZC,EAAW,CACbC,IAAK,KACLC,SAAU,MAGPD,IAAIE,KAAKC,SACZH,IAAII,cAAcjB,GAClBY,EAAW,CACTC,IAAKA,IACLC,SAAUD,IAAIC,WAEdI,IAAK,CACHC,SAoBN,SACE/B,EACAgC,EACAC,EACAC,GAOA,GALAC,EAASC,IAAI,SAGU,KAArBpC,GAAmD,KAAxBgC,EAG3B,GAAyB,cAArBhC,EAAkC,CACpC,IAAMqC,EAAeC,YAAaN,GAC5BO,EAAuBC,YAAYC,YAASJ,IAElDF,EACGO,aACC1C,GD5EyB,YC8E1B2C,QAAQC,OAAOZ,IACfa,MAAMD,OAAOL,IACbO,GAAG,QANN,uCAMe,WAAOC,GAAP,iBAAAC,EAAA,6DACLC,EAAQF,EAAUG,MADb,SAEiBC,EAA4BF,GAF7C,OAELG,EAFK,OAGXC,EAASjD,EAASgD,IAHP,2CANf,4DAYAjB,EACGO,aACC1C,GDxFyB,YC0F1BsD,QAAQtB,GACRc,GAAG,QALN,uCAKe,WAAOC,GAAP,iBAAAC,EAAA,6DACLC,EAAQF,EAAUG,MADb,SAEiBC,EAA4BF,GAF7C,OAELG,EAFK,OAGXC,EAASjD,EAASgD,IAHP,2CALf,4DAYFjB,EACGO,aACCT,GDnG2B,iBCqG5BU,QACCT,EAAkBqB,eAAiBrB,EAAkBsB,eAEtDX,MAAMX,EAAoB,KAC1BY,GAAG,QARN,uCAQe,WAAOC,GAAP,iBAAAC,EAAA,6DACLC,EAAQF,EAAUG,MADb,SAEiBC,EAA4BF,GAF7C,OAELG,EAFK,OAGXC,EAASjD,EAASgD,IAHP,2CARf,wDA3DEK,SAkHN,SAAkBC,GAChBvB,EAASwB,KAAKD,IAlHVE,QAyHN,SAAiBF,GACfvB,EAAS0B,MAAMH,EAAKxD,IAAI4D,OAAOJ,IAzH3BK,WAoHN,SAAoB7D,GAClBiC,EAAS0B,MAAM3D,GAAI8D,UApHfC,gBACAC,aA0HN,SAAsBC,GACpBC,EAAcT,KAAKQ,IA1HfE,YAiIN,SAAqBF,GACnBC,EAAcP,MAAMM,EAASjE,IAAI4D,OAAOK,IAjIpCG,eA4HN,SAAwBpE,GACtBkE,EAAcP,MAAM3D,GAAI8D,aAxH1B,IAAMX,EAAWkB,cAEXC,EAAQhD,EAASE,SACjBS,EAAWqC,EAAMC,IAAI,SACrBL,EAAgBI,EAAMC,IAAI,cAEhCR,IA0DA,IAAMd,EAA2B,uCAAG,WAAOF,GAAP,mBAAAD,EAAA,sDAC9BI,EAAgB,GADc,IAAAJ,EAAA,iBAGzB0B,GAHyB,iBAAA1B,EAAA,6DAI1B2B,EAAY1B,EAAMyB,GACpBE,EAAcJ,EAAMC,IAAI,cAAcZ,MAAMc,EAAUR,UAL1B,SAM1BS,EAAYC,KAAK,SAAS,SAACC,GAC/B,IAAMC,EAAeD,EAAa5B,MAClCE,EAAcO,KAAK,CACjBzD,GAAIwE,EACJP,SAAS,2BAAMY,GAAP,IAAqB7E,GAAIyE,EAAUR,WAC3Ca,UAAWL,EAAUK,UACrBC,iBAAkBN,EAAUM,iBAC5BC,wBAAyBP,EAAUO,wBACnCC,OAAQR,EAAUQ,OAClBC,aAAcT,EAAUS,aACxBC,cAAeV,EAAUU,mBAhBG,iDAAArC,EAAA,KAGjBC,GAHiB,oDAGzByB,EAHyB,6BAGzBA,GAHyB,8DAoB3BtB,GApB2B,2CAAH,sDAuBjC,SAASa,IACPG,EAAchC,IAAI,SAClBgC,EAActB,GAAG,SAAS,SAACwC,GACzB,IAAMrC,EAAQqC,EAAKpC,MACfE,EAAgB,GACpB,IAAK,IAAIsB,KAAQzB,EAAO,CACtB,IAAM0B,EAAY1B,EAAMyB,GACxBtB,EAAcO,KAAK,CACjBzD,GAAIwE,EACJvE,KAAMwE,EAAUxE,OAGpBkD,EClJG,CACL/C,KCD0B,iBDE1BC,QDgJyB6C,OA4B3B,OACE,kBAAC/B,EAAgBkE,SAAjB,CAA0BC,MAAOhE,GAC9BD,IGzCQkE,MAzHf,WACE,IAkBIC,EAlBEjF,EAAUkF,aAAY,SAACC,GAAD,OAAqBA,EAAMC,UAAUpF,WACzDT,EAAwCS,EAAxCT,iBAAkBC,EAAsBQ,EAAtBR,kBACd6F,EAAkB7F,EAAtBC,GAEF6F,EAAcJ,aAAY,SAACC,GAAD,OAAqBA,EAAMC,UAAUG,UAC7D/D,EAAwC8D,EAAxC9D,iBAAkBC,EAAsB6D,EAAtB7D,kBAEpBG,EAAesD,aACnB,SAACC,GAAD,OAAqBA,EAAMC,UAAUxD,gBAGjCgB,EAAWkB,cAETzC,EAAamE,qBAAW5E,GAAxBS,IAEFoE,EACiB,KAArBlG,QAAiDmG,IAAtBlG,EAoD7B,OAdAmG,qBAAU,WACRtE,EAAIC,SACF/B,EACA8F,EACA7D,EACAC,KAED,CACDJ,EACA9B,EACA8F,EACA7D,EACAC,IAGA,kBAACmE,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,GAAIC,IAAMC,GCzFT,KDyFf,kBAGA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiB5G,GAAG,oBAClB,kBAAC6G,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIL,KAAL,CAAUD,GAAIC,IAAMC,GC/FT,KD+FX,SAGA,kBAACI,EAAA,EAAIL,KAAL,CAAUD,GAAIC,IAAMC,GCjGJ,eDiGhB,eAIF,kBAACM,EAAA,EAAD,CAAMC,QAAM,GACThB,GAAmB7D,GAClB,kBAAC,IAAD,CACE8E,KAAK,SACLH,UAAU,cACVI,KAAM,GACNC,QAAS,kBAvCnBhE,EL3CK,CACL/C,KDlB+B,sBCmB/BC,QAAS,UK0CT8C,EAAS3C,OAAgByF,OA0CnB,kBAAC,IAAD,CACEmB,SAAU,SAAC3G,GAAD,OA3DC,SAACA,GACpB0C,EAAS3C,EAAgBC,IACzB,IAAM4G,EAAkB/E,YAAY7B,GAAM6G,WAC1CnE,EACE7C,EAAe,CACbR,iBAAkB,YAClBC,kBAAmB,CACjBE,KAAMsH,YAAO9G,EAAM,cACnBT,GAAIqH,MAmDkBG,CAAa/G,IACjC6E,MAAOnD,EACPsF,QAAS,IAAIC,KACbZ,UAAU,kBACVa,UAAW,OAGb,kBAACC,EAAA,EAAD,CAAYd,UAAU,QACpB,kBAACe,EAAA,EAAD,CACEzH,KAAK,OACL0H,YAAY,0BACZV,SAAU,SAACW,GAAD,OAnFNC,EAmFyBD,EAAEE,OAAO3C,MAlFhD4C,aAAa1C,QAEbA,EAAQ2C,YAAW,WACjBhF,ELbC,SAAwB2C,GAC7B,MAAO,CACL1F,KDxB4B,mBCyB5BC,QAASyF,GKWLsC,CAAe,CACbrG,iBARmB,gBASnBC,kBAAmBgG,OAVE,MAGd,IAACA,GAoFJK,SAAUrC,IAEZ,kBAAC4B,EAAA,EAAWU,OAAZ,KACE,kBAACV,EAAA,EAAWW,KAAZ,KACE,kBAAC,IAAD,a,yKE/HHC,GAAuBC,KAAW,CAC7C1D,iBAAkB0D,OAAaC,IAAI,KAAKC,MAAM,qBAAqBC,WACnE5D,wBAAyByD,OACtBC,IAAI,KACJC,MAAM,4BACNC,WACHzD,cAAesD,OAAaC,IAAI,IAAIC,MAAM,kBAAkBC,WAC5D3D,OAAQwD,OAAaI,IAAI,GAAGH,IAAI,IAAIC,MAAM,UAAUC,WACpD3E,SAAUwE,OAAaE,MAAM,YAAYC,aAG9BE,GAA2BL,KAAW,CACjDxI,KAAMwI,OAAaE,MAAM,QAAQC,aCD5B,SAASG,GAAmBC,GACjC,MAAO,CACL5I,KCEiC,wBDDjCC,QAAS2I,GAGN,SAASC,GAA6BD,GAC3C,MAAO,CACL5I,KCFF,mCDGEC,QAAS2I,GASN,SAASE,GAAmBF,EAAqBhJ,GACtD,MAAO,CACLI,KCZiC,wBDajCC,QAAS,CAAE8I,mBAAoBH,EAAYhJ,OAIxC,SAASoJ,GAAuBJ,GACrC,MAAO,CACL5I,KCjBqC,4BDkBrCC,QAAS2I,GAGN,SAASK,GAAiCL,GAC/C,MAAO,CACL5I,KCrBF,uCDsBEC,QAAS2I,GASN,SAASM,GAAuBN,EAAqBhJ,GAC1D,MAAO,CACLI,KC/BqC,4BDgCrCC,QAAS,CAAE8I,mBAAoBH,EAAYhJ,O,wBEiIhCuJ,OA9Kf,WACE,IAAMC,EAAa/D,aACjB,SAACC,GAAD,OAAqBA,EAAM+D,eAAeD,cAEtCrJ,EAAQsF,aAAY,SAACC,GAAD,OAAqBA,EAAMC,UAAUxF,SAEzDgD,EAAWkB,cAETzC,EAAamE,qBAAW5E,GAAxBS,IAWR,OACE,kBAAC,IAAD,CACE8H,cAAe,CACb3E,iBAAkB,GAClBC,wBAAyB,GACzBG,cAAe,GACfF,OAAQ,EACRhB,SAAU,IAEZ0F,iBAAkBnB,GAClBoB,SAAU,SAACC,IAnBC,SAACrG,GACf,IAAMsG,EAAc,2BACftG,GADe,IAElBsB,UAAWxC,YAAY,IAAIoF,MAC3BxC,aAAc/E,EAAMuB,OAAS,IAE/BE,EAAI2B,SAASuG,GACb3G,EAAS4F,IAAmB,IAaxBgB,CAAQF,MAGT,gBACCA,EADD,EACCA,OACAG,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,MACAC,EALD,EAKCA,aACAC,EAND,EAMCA,WACAC,EAPD,EAOCA,aACAC,EARD,EAQCA,cACAC,EATD,EASCA,QATD,OAWC,kBAACxD,EAAA,EAAD,CAAM6C,SAAUS,GACd,kBAACtD,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,4BACA,kBAAC1D,EAAA,EAAK2D,QAAN,CACEnE,GAAG,WACHoE,KAAM,EACN7C,YAAY,gBACZhB,UAAU,eACV7G,KAAK,mBACLmH,SAAU+C,EACVS,OAAQR,EACR9E,MAAOuE,EAAO9E,iBACdwF,QAASN,EAAQlF,mBAAqBiF,EAAOjF,iBAC7C8F,YAAab,EAAOjF,mBAErBiF,EAAOjF,kBACN,kBAACgC,EAAA,EAAK2D,QAAQI,SAAd,CAAuB1K,KAAK,WACzB4J,EAAOjF,mBAId,kBAACgC,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,qBACA,kBAAC1D,EAAA,EAAK2D,QAAN,CACEnE,GAAG,WACHoE,KAAM,EACN7C,YAAY,wCACZhB,UAAU,oBACV7G,KAAK,0BACLmH,SAAU+C,EACVS,OAAQR,EACR9E,MAAOuE,EAAO7E,wBACduF,QACEN,EAAQjF,0BACPgF,EAAOhF,wBAEV6F,YAAab,EAAOhF,0BAErBgF,EAAOhF,yBACN,kBAAC+B,EAAA,EAAK2D,QAAQI,SAAd,CAAuB1K,KAAK,WACzB4J,EAAOhF,0BAId,kBAAC+B,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,uBACA,kBAAC1D,EAAA,EAAK2D,QAAN,CACE5C,YAAY,iBACZhB,UAAU,eACV7G,KAAK,gBACLmH,SAAU+C,EACVS,OAAQR,EACR9E,MAAOuE,EAAO1E,cACdoF,QAASN,EAAQ9E,gBAAkB6E,EAAO7E,cAC1C0F,YAAab,EAAO7E,gBAErB6E,EAAO7E,eACN,kBAAC4B,EAAA,EAAK2D,QAAQI,SAAd,CAAuB1K,KAAK,WACzB4J,EAAO7E,gBAId,kBAAC4B,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,iBACA,kBAAC1D,EAAA,EAAK2D,QAAN,CACEnE,GAAG,SACHtG,KAAK,WACLmH,SAAU+C,EACVS,OAAQR,EACR9E,MAAOuE,EAAO5F,SACdsG,QAASN,EAAQhG,WAAa+F,EAAO/F,SACrC4G,YAAab,EAAO/F,UAEpB,4BAAQqB,MAAM,GAAG+C,UAAQ,GAAzB,mBAGCmB,EAAWuB,KAAI,SAACC,EAAuBC,GACtC,OACE,4BAAQC,IAAKD,EAAG3F,MAAO0F,EAAOhL,IAC3BgL,EAAO/K,UAMf+J,EAAO/F,UACN,kBAAC8C,EAAA,EAAK2D,QAAQI,SAAd,CAAuB1K,KAAK,WACzB4J,EAAO/F,WAId,kBAAC8C,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,eACA,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,KAAD,CACEC,UT1Jc,GS2JdpL,KAAK,SACLqF,MAAOuE,EAAO5E,OACdqG,eAAgB,kBACd,kBAAC,IAAD,CAAepE,KAAM,GAAIJ,UAAU,UAErCyE,YAAa,SAACC,GAAD,OAAYlB,EAAc,SAAUkB,MAEnD,2BAAO1E,UAAU,0BACd+C,EAAO5E,OADV,ITlKgB,OSwKtB,kBAACwG,EAAA,EAAD,CACE3E,UAAU,cACV4E,QAAQ,QACRvE,QAAS,kBAAMhE,EAAS4F,IAAmB,MAH7C,SAOA,kBAAC0C,EAAA,EAAD,CACE3E,UAAU,mBACV1G,KAAK,SACLiI,WAAYkC,GAAWL,IAHzB,aCvJKyB,OApBf,SAAyBC,GACvB,OACE,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEE1E,KAAK,KACL4E,kBAAgB,gCAChBC,UAAQ,IAER,kBAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvB,kBAACJ,EAAA,EAAMK,MAAP,CAAalM,GAAG,iCAAhB,oBAIF,kBAAC6L,EAAA,EAAMM,KAAP,KACE,kBAACC,GAAD,SCsLO7C,OA1Lf,WACE,IAAMC,EAAa/D,aACjB,SAACC,GAAD,OAAqBA,EAAM+D,eAAeD,cAEtCrJ,EAAQsF,aAAY,SAACC,GAAD,OAAqBA,EAAMC,UAAUxF,SACzDkM,EAAe5G,aACnB,SAACC,GAAD,OAAqBA,EAAM4G,OAAOC,WAAWF,gBAGzCG,EAMFH,EANFrM,GACA+E,EAKEsH,EALFtH,iBACAC,EAIEqH,EAJFrH,wBACAG,EAGEkH,EAHFlH,cACAF,EAEEoH,EAFFpH,OACAhB,EACEoI,EADFpI,SAGId,EAAWkB,cAETzC,EAAamE,qBAAW5E,GAAxBS,IAYR,OACE,kBAAC,IAAD,CACE8H,cAAe,CACb3E,iBAAkBA,EAClBC,wBAAyBA,EACzBG,cAAeA,EACfF,OAAQA,EACRhB,SAAUA,EAASjE,IAErB2J,iBAAkBnB,GAClBoB,SAAU,SAACC,IApBI,SAACrG,GAClB,IAAMsG,EAAc,2BACftG,GADe,IAElBxD,GAAIwM,EACJ1H,UAAWxC,YAAY,IAAIoF,MAC3BxC,aAAc/E,EAAMuB,OAAS,IAE/BE,EAAI8B,QAAQoG,GACZ3G,EAAS8F,IAA6B,IAalCsD,CAAW1C,MAGZ,gBACCA,EADD,EACCA,OACAG,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,MACAC,EALD,EAKCA,aACAC,EAND,EAMCA,WACAC,EAPD,EAOCA,aACAC,EARD,EAQCA,cACAC,EATD,EASCA,QATD,OAWC,kBAACxD,EAAA,EAAD,CAAM6C,SAAUS,GACd,kBAACtD,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,4BACA,kBAAC1D,EAAA,EAAK2D,QAAN,CACEnE,GAAG,WACHoE,KAAM,EACN7C,YAAY,gBACZhB,UAAU,eACV7G,KAAK,mBACLmH,SAAU+C,EACVS,OAAQR,EACR9E,MAAOuE,EAAO9E,iBACdwF,QAASN,EAAQlF,mBAAqBiF,EAAOjF,iBAC7C8F,YAAab,EAAOjF,mBAErBiF,EAAOjF,kBACN,kBAACgC,EAAA,EAAK2D,QAAQI,SAAd,CAAuB1K,KAAK,WACzB4J,EAAOjF,mBAId,kBAACgC,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,qBACA,kBAAC1D,EAAA,EAAK2D,QAAN,CACEnE,GAAG,WACHoE,KAAM,EACN7C,YAAY,wCACZhB,UAAU,eACV7G,KAAK,0BACLmH,SAAU+C,EACVS,OAAQR,EACR9E,MAAOuE,EAAO7E,wBACduF,QACEN,EAAQjF,0BACPgF,EAAOhF,wBAEV6F,YAAab,EAAOhF,0BAErBgF,EAAOhF,yBACN,kBAAC+B,EAAA,EAAK2D,QAAQI,SAAd,CAAuB1K,KAAK,WACzB4J,EAAOhF,0BAId,kBAAC+B,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,uBACA,kBAAC1D,EAAA,EAAK2D,QAAN,CACE5C,YAAY,iBACZhB,UAAU,eACV7G,KAAK,gBACLmH,SAAU+C,EACVS,OAAQR,EACR9E,MAAOuE,EAAO1E,cACdoF,QAASN,EAAQ9E,gBAAkB6E,EAAO7E,cAC1C0F,YAAab,EAAO7E,gBAErB6E,EAAO7E,eACN,kBAAC4B,EAAA,EAAK2D,QAAQI,SAAd,CAAuB1K,KAAK,WACzB4J,EAAO7E,gBAId,kBAAC4B,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,iBACA,kBAAC1D,EAAA,EAAK2D,QAAN,CACEnE,GAAG,SACHtG,KAAK,WACLmH,SAAU+C,EACVS,OAAQR,EACR9E,MAAOuE,EAAO5F,SACdsG,QAASN,EAAQhG,WAAa+F,EAAO/F,SACrC4G,YAAab,EAAO/F,UAEpB,4BAAQqB,MAAM,GAAG+C,UAAQ,GAAzB,mBAGCmB,EAAWuB,KAAI,SAACC,EAAuBC,GACtC,OACE,4BAAQC,IAAKD,EAAG3F,MAAO0F,EAAOhL,IAC3BgL,EAAO/K,UAMf+J,EAAO/F,UACN,kBAAC8C,EAAA,EAAK2D,QAAQI,SAAd,CAAuB1K,KAAK,WACzB4J,EAAO/F,WAId,kBAAC8C,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,eACA,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,KAAD,CACEC,UXtKc,GWuKdpL,KAAK,SACLqF,MAAOuE,EAAO5E,OACdqG,eAAgB,kBACd,kBAAC,IAAD,CAAepE,KAAM,GAAIJ,UAAU,UAErCyE,YAAa,SAACC,GAAD,OAAYlB,EAAc,SAAUkB,MAEnD,2BAAO1E,UAAU,0BACd+C,EAAO5E,OADV,IX9KgB,OWoLtB,kBAACwG,EAAA,EAAD,CACE3E,UAAU,cACV4E,QAAQ,QACRvE,QAAS,kBAAMhE,EAAS8F,IAA6B,MAHvD,SAOA,kBAACwC,EAAA,EAAD,CACE3E,UAAU,mBACV1G,KAAK,SACLiI,WAAYkC,GAAWL,IAHzB,aCnKKuC,OApBf,SAAyBb,GACvB,OACE,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEE1E,KAAK,KACL4E,kBAAgB,gCAChBC,UAAQ,IAER,kBAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvB,kBAACJ,EAAA,EAAMK,MAAP,CAAalM,GAAG,iCAAhB,gBAIF,kBAAC6L,EAAA,EAAMM,KAAP,KACE,kBAACO,GAAD,SCgCOC,OA1Cf,SAAqCf,GACnC,IAAMgB,EAAenH,aACnB,SAACC,GAAD,OAAqBA,EAAM4G,OAAOO,WAAW7M,MAGzCmD,EAAWkB,cAETzC,EAAamE,qBAAW5E,GAAxBS,IAMR,OACE,kBAACiK,EAAA,EAAD,iBAAWD,EAAX,CAAkBE,kBAAgB,gCAAgCC,UAAQ,IACxE,kBAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvB,kBAACJ,EAAA,EAAMK,MAAP,CAAalM,GAAG,iCAAhB,kBAIF,kBAAC6L,EAAA,EAAMM,KAAP,KACE,yBAAKrF,UAAU,eACb,kBAAC2E,EAAA,EAAD,CACEC,QAAQ,SACR5E,UAAU,OACVK,QAAS,kBAhBCnH,EAgBgB4M,EAflChL,EAAIiC,WAAW7D,QACfmD,EAAS+F,IAAmB,EAAO,KAFlB,IAAClJ,IAaZ,WAOA,kBAACyL,EAAA,EAAD,CACEC,QAAQ,QACR5E,UAAU,OACVK,QAAS,kBAAMhE,EAAS+F,IAAmB,EAAO,OAHpD,c,uCCJK4D,GA3BY,SAAClB,GAAgB,IAClCvK,EAAiCuK,EAAjCvK,SAAU0L,EAAuBnB,EAAvBmB,SAAUC,EAAapB,EAAboB,SACtBC,EAAkBlH,qBAAWmH,MAE7BC,EAAmBC,aACvBL,GACA,kBAAMC,GAAYA,EAASD,MAGvBM,EAAoBJ,IAAoBF,EAE9C,OACE,kBAACtB,EAAA,EAAD,CACEC,QAAS2B,EAAoB,oBAAsB,QACnDvG,UAAU,eACVK,QAASgG,GAER9L,EACAgM,EACC,kBAAC,KAAD,CAAcnG,KAAM,KAEpB,kBAAC,KAAD,CAAgBA,KAAM,OCkRfoG,OAxQf,WACE,IAAMnN,EAAQsF,aAAY,SAACC,GAAD,OAAqBA,EAAMC,UAAUxF,SAEzDoN,EAAqB9H,aACzB,SAACC,GAAD,OAAqBA,EAAM4G,OAAOkB,cAE9BC,EAAqBhI,aACzB,SAACC,GAAD,OAAqBA,EAAM4G,OAAOC,WAAWmB,oBAEzCvE,EAAqB1D,aACzB,SAACC,GAAD,OAAqBA,EAAM4G,OAAOO,WAAW1D,sBAEzC5I,EAAUkF,aAAY,SAACC,GAAD,OAAqBA,EAAMC,UAAUpF,WACzDT,EAAwCS,EAAxCT,iBAAkBC,EAAsBQ,EAAtBR,kBACZ4N,EAAuC5N,EAA7CE,KAA2B2F,EAAkB7F,EAAtBC,GAEzB6F,EAAcJ,aAAY,SAACC,GAAD,OAAqBA,EAAMC,UAAUG,UAC7D/D,EAAwC8D,EAAxC9D,iBAAkBC,EAAsB6D,EAAtB7D,kBAEpB4L,EAAuC,KAArB7L,GAAiD,KAAtBC,EAC7CgE,EACiB,KAArBlG,QAAiDmG,IAAtBlG,EAEvBoD,EAAWkB,cAETzC,EAAamE,qBAAW5E,GAAxBS,IAKFiM,EAAgB,SAACjC,GAAD,OACpB,kBAACkC,EAAA,EAAD,eAAS9N,GAAG,kBAAqB4L,GAC9BA,EAAMmC,QAILC,EAAyC,CAC7CC,UAAW,SACX,gBAAiB,UACjBC,KAAM,OACNC,cAAe,OACfC,OAAQ,WAmCV,OAdAlI,qBAAU,WACRtE,EAAIC,SACF/B,EACA8F,EACA7D,EACAC,KAED,CACDJ,EACA9B,EACA8F,EACA7D,EACAC,IAGA,oCACE,kBAAC,GAAD,CACEqM,KAAMd,EACNe,OAAQ,kBAAMnL,EAAS4F,IAAmB,OAG5C,kBAAC,GAAD,CACEsF,KAAMZ,EACNa,OAAQ,kBAAMnL,EAAS8F,IAA6B,OAGtD,kBAAC,GAAD,CACEoF,KAAMlF,EACNmF,OAAQ,kBAAMnL,EAAS+F,IAAmB,EAAO,QAGlDyE,GACC,yBAAK7G,UAAU,QACb,wCAAchH,EAAd,SACA,kBAACyO,EAAA,EAAD,CAAO7C,QAAQ,SACb,8BAAOiC,GACP,kBAAC,IAAD,CACE1G,KAAK,SACLH,UAAU,gCACVK,QAAS,WACPhE,EhBjHP,CACL/C,KDlB+B,sBCmB/BC,QAAS,KgBgHG8C,EAAS3C,OAAgByF,KAE3BiB,KAAM,OAMd,kBAACuE,EAAA,EAAD,CACEtE,QAAS,kBAAMhE,EAAS4F,IAAmB,KAC3CjC,UAAU,mCAEV,kBAAC,IAAD,CAAiBI,KAAM,KAJzB,gBAOC/G,EAAMuB,OAAS,EACd,kBAAC8M,EAAA,EAAD,CAAWC,iBAAiB,MACzBtO,EAAM4K,KAAI,SAACvH,EAAiByH,GAAO,IA7FlByD,EA+FVC,EAOFnL,EAPFxD,GACA8E,EAMEtB,EANFsB,UACAK,EAKE3B,EALF2B,cACAlB,EAIET,EAJFS,SACAgB,EAGEzB,EAHFyB,OACAF,EAEEvB,EAFFuB,iBACAC,EACExB,EADFwB,wBAEU4J,EAAmC3K,EAAvCjE,GAAsB6E,EAAiBZ,EAAvBhE,KACxB,OACE,kBAAC4O,EAAA,EAAD,CAAM3D,IAAKD,EAAGnE,UAAU,qBAAqBgI,OAAO,WAClD,kBAACD,EAAA,EAAK7C,OAAN,KACE,kBAACb,EAAA,EAAD,CAAKrE,UAAU,sBACb,kBAACsE,EAAA,EAAD,CAAK2D,GAAI,GACP,4BAAQjI,UAAU,qBAAlB,eACehC,IA9GT4J,EA8GuC5J,EA7G/DyC,YAAOnF,YAAasM,GAAY,2BAgHhB,kBAACtD,EAAA,EAAD,CACE2D,GAAI,EACJjI,UAAU,oDAET3B,GAEH,kBAACiG,EAAA,EAAD,CAAK4D,GAAI,EAAGD,GAAI,EAAGjI,UAAU,2BAC3B,kBAACmI,EAAA,EAAD,CACEC,UAAU,MACVC,MAAO,CAAEd,KAAM,IAAKe,KAAM,IAC1BC,QAASxB,EAAc,CACrBE,MAAO,aAAelJ,KAGxB,kBAAC0J,EAAA,EAAD,CACEpH,QAAS,kBACNyG,GA3GF,SAAC/I,EAAsB+J,GAC9CzL,EAAS3C,OAAgByF,IACzB9C,EACE7C,EAAe,CACbR,iBAAkB,WAClBC,kBAAmB,CACjBE,KAAM4E,EACN7E,GAAI4O,GAA0B,OAqGZU,CAAiBzK,EAAc+J,IAEjC9H,UAAW,WAAakH,EAAenJ,IAEtCA,KAIP,kBAACuG,EAAA,EAAD,CAAK2D,GAAI,EAAGQ,GAAI,EAAGzI,UAAU,gCAC3B,kBAAC,KAAD,CACEuE,UAAW,EACXpL,KAAK,qBACLqF,MAAOL,Ef9MC,Ge+MRqG,eAAgB,kBACd,yBAAKxE,UAAU,gCACb,kBAAC,IAAD,CAAeI,KAAM,GAAIJ,UAAU,SAAU,IAC7C,8BAAO7B,KAGXuK,SAAS,KAGb,kBAACpE,EAAA,EAAD,CAAK2D,GAAI,EAAGjI,UAAU,iCACpB,kBAAC,KAAD,CACEuE,Uf1NQ,Ge2NRpL,KAAK,cACLqF,MAAOL,EACPqG,eAAgB,kBACd,kBAAC,IAAD,CAAepE,KAAM,GAAIJ,UAAU,UAErC0I,SAAS,KAGb,kBAACpE,EAAA,EAAD,CAAK2D,GAAI,GACP,kBAAC,GAAD,CAAoBhC,SAAU9B,EAAE3D,gBAItC,kBAACkH,EAAA,EAAU5H,SAAX,CAAoBmG,SAAU9B,EAAE3D,YAC9B,kBAACuH,EAAA,EAAK1C,KAAN,KACE,kBAAChB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,2CACA,2BAAIrG,IAEN,kBAACqG,EAAA,EAAD,KACE,4CACA,2BAAIpG,KAGR,kBAACmG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKtE,UAAU,cACb,kBAACmI,EAAA,EAAD,CACEC,UAAU,MACVC,MAAO,CAAEd,KAAM,IAAKe,KAAM,IAC1BC,QAASxB,EAAc,CAAEE,MAAO,YAEhC,kBAACtC,EAAA,EAAD,CACEC,QAAQ,UACRxE,KAAK,KACLJ,UAAU,YACVK,QAAS,kBA9KP,SAAC3D,GAC3BL,ERxDK,CACL/C,KCPsC,6BDQtCC,QQsDgCmD,IAChCL,EAAS8F,IAA6B,IA4KCwG,CAAoBjM,KAEnC,kBAAC,IAAD,MANF,YASF,kBAACyL,EAAA,EAAD,CACEC,UAAU,MACVC,MAAO,CAAEd,KAAM,IAAKe,KAAM,KAC1BC,QAASxB,EAAc,CAAEE,MAAO,YAEhC,kBAACtC,EAAA,EAAD,CACEC,QAAQ,SACRxE,KAAK,KACLJ,UAAU,YACVK,QAAS,kBACPhE,EACE+F,IAAmB,EAAMyF,MAI7B,kBAAC,IAAD,MAVF,qBAsBlB,kBAACxD,EAAA,EAAD,CAAKrE,UAAU,oBACb,kBAACsE,EAAA,EAAD,KACGwC,GAAmB5H,EAClB,qEAEA,kBAAC0J,EAAA,EAAD,CAASC,UAAU,SAASjE,QAAQ,gB,OCtNnCkE,OArEf,WACE,IAAMzM,EAAWkB,cAETzC,EAAamE,qBAAW5E,GAAxBS,IAMR,OACE,kBAAC,IAAD,CACE8H,cAAe,CACbzJ,KAAM,IAER0J,iBAAkBb,GAClBc,SAAU,SAACC,GAVK,IAAC5F,IAWH4F,EAVhBjI,EAAIoC,aAAaC,GACjBd,EAASiG,IAAuB,OAY7B,gBACCS,EADD,EACCA,OACAG,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,MACAC,EALD,EAKCA,aACAC,EAND,EAMCA,WACAC,EAPD,EAOCA,aACAE,EARD,EAQCA,QARD,OAUC,kBAACxD,EAAA,EAAD,CAAM6C,SAAUS,GACd,kBAACtD,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,yBACA,kBAAC1D,EAAA,EAAK2D,QAAN,CACEtK,KAAK,OACL0H,YAAY,OACZhB,UAAU,eACV7G,KAAK,OACLmH,SAAU+C,EACVS,OAAQR,EACR9E,MAAOuE,EAAO5J,KACdsK,QAASN,EAAQhK,OAAS+J,EAAO/J,KACjC4K,YAAab,EAAO/J,OAErB+J,EAAO/J,MACN,kBAAC8G,EAAA,EAAK2D,QAAQI,SAAd,CAAuB1K,KAAK,WACzB4J,EAAO/J,OAId,kBAACwL,EAAA,EAAD,CACE3E,UAAU,cACV4E,QAAQ,QACRvE,QAAS,kBAAMhE,EAASiG,IAAuB,MAHjD,SAOA,kBAACqC,EAAA,EAAD,CACE3E,UAAU,mBACV1G,KAAK,SACLiI,WAAYkC,GAAWL,IAHzB,aCzCK2F,OApBf,SAA6BjE,GAC3B,OACE,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEE1E,KAAK,KACL4E,kBAAgB,gCAChBC,UAAQ,IAER,kBAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvB,kBAACJ,EAAA,EAAMK,MAAP,CAAalM,GAAG,iCAAhB,wBAIF,kBAAC6L,EAAA,EAAMM,KAAP,KACE,kBAAC2D,GAAD,SCsEOF,OA9Ef,WACE,IAAMG,EAAmBtK,aACvB,SAACC,GAAD,OAAqBA,EAAM4G,OAAO0D,eAAeD,oBAEvCE,EAA6BF,EAAjC/P,GAAwBC,EAAS8P,EAAT9P,KAE1BkD,EAAWkB,cAETzC,EAAamE,qBAAW5E,GAAxBS,IAUR,OACE,kBAAC,IAAD,CACE8H,cAAe,CACbzJ,KAAMA,GAER0J,iBAAkBb,GAClBc,SAAU,SAACC,IAdQ,SAAC5F,GACtB,IAAM6F,EAAc,2BACf7F,GADe,IAElBjE,GAAIiQ,IAENrO,EAAIuC,YAAY2F,GAChB3G,EAASkG,IAAiC,IAStC2G,CAAenG,MAGhB,gBACCA,EADD,EACCA,OACAG,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,MACAC,EALD,EAKCA,aACAC,EAND,EAMCA,WACAC,EAPD,EAOCA,aACAE,EARD,EAQCA,QARD,OAUC,kBAACxD,EAAA,EAAD,CAAM6C,SAAUS,GACd,kBAACtD,EAAA,EAAKyD,MAAN,KACE,kBAACzD,EAAA,EAAK0D,MAAN,yBACA,kBAAC1D,EAAA,EAAK2D,QAAN,CACEtK,KAAK,OACL0H,YAAY,OACZhB,UAAU,eACV7G,KAAK,OACLmH,SAAU+C,EACVS,OAAQR,EACR9E,MAAOuE,EAAO5J,KACdsK,QAASN,EAAQhK,OAAS+J,EAAO/J,KACjC4K,YAAab,EAAO/J,OAErB+J,EAAO/J,MACN,kBAAC8G,EAAA,EAAK2D,QAAQI,SAAd,CAAuB1K,KAAK,WACzB4J,EAAO/J,OAId,kBAACwL,EAAA,EAAD,CACE3E,UAAU,cACV4E,QAAQ,QACRvE,QAAS,kBAAMhE,EAASkG,IAAiC,MAH3D,SAOA,kBAACoC,EAAA,EAAD,CACE3E,UAAU,mBACV1G,KAAK,SACLiI,WAAYkC,GAAWL,IAHzB,aCnDKgG,OApBf,SAA6BtE,GAC3B,OACE,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEE1E,KAAK,KACL4E,kBAAgB,gCAChBC,UAAQ,IAER,kBAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvB,kBAACJ,EAAA,EAAMK,MAAP,CAAalM,GAAG,iCAAhB,oBAIF,kBAAC6L,EAAA,EAAMM,KAAP,KACE,kBAACgE,GAAD,SCmCOC,OA7Cf,SAAyCxE,GAIvC,IAAMyE,EAAmB5K,aACvB,SAACC,GAAD,OAAqBA,EAAM4G,OAAOgE,eAAetQ,MAG7CmD,EAAWkB,cAETzC,EAAamE,qBAAW5E,GAAxBS,IAMR,OACE,kBAACiK,EAAA,EAAD,iBAAWD,EAAX,CAAkBE,kBAAgB,gCAAgCC,UAAQ,IACxE,kBAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvB,kBAACJ,EAAA,EAAMK,MAAP,CAAalM,GAAG,iCAAhB,kBAIF,kBAAC6L,EAAA,EAAMM,KAAP,KACE,yBAAKrF,UAAU,eACb,kBAAC2E,EAAA,EAAD,CACEC,QAAQ,SACR5E,UAAU,OACVK,QAAS,kBAhBKnH,EAgBgBqQ,EAftCzO,EAAIwC,eAAepE,QACnBmD,EAASmG,IAAuB,EAAO,KAFlB,IAACtJ,IAahB,WAOA,kBAACyL,EAAA,EAAD,CACEC,QAAQ,QACR5E,UAAU,OACVK,QAAS,kBAAMhE,EAASmG,IAAuB,EAAO,OAHxD,cCoEKiH,OA3Ff,WACE,IAAM/G,EAAa/D,aACjB,SAACC,GAAD,OAAqBA,EAAM+D,eAAeD,cAGtC+D,EAAqB9H,aACzB,SAACC,GAAD,OAAqBA,EAAM4G,OAAOkE,kBAE9B/C,EAAqBhI,aACzB,SAACC,GAAD,OAAqBA,EAAM4G,OAAO0D,eAAeS,wBAE7CtH,EAAqB1D,aACzB,SAACC,GAAD,OAAqBA,EAAM4G,OAAOgE,eAAenH,sBAE7ChG,EAAWkB,cAMjB,OACE,oCACE,kBAACoH,EAAA,EAAD,CACEtE,QAAS,kBAAMhE,EAASiG,IAAuB,KAC/CtC,UAAU,uCAEV,kBAAC,IAAD,CAAiBI,KAAM,KAJzB,oBAOA,kBAAC,GAAD,CACEmH,KAAMd,EACNe,OAAQ,kBAAMnL,EAASiG,IAAuB,OAGhD,kBAAC,GAAD,CACEiF,KAAMZ,EACNa,OAAQ,kBAAMnL,EAASkG,IAAiC,OAG1D,kBAAC,GAAD,CACEgF,KAAMlF,EACNmF,OAAQ,kBAAMnL,EAASmG,IAAuB,EAAO,QAGtDE,EAAW9H,OAAS,EACnB8H,EAAWuB,KAAI,SAAC9G,EAAyBgH,GACvC,OACE,kBAAC4D,EAAA,EAAD,CAAM3D,IAAKD,EAAGnE,UAAU,OAAOgI,OAAO,WACpC,kBAACD,EAAA,EAAK7C,OAAN,KACE,kBAACb,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,8BAAOnH,EAAShE,OAElB,kBAACmL,EAAA,EAAD,CAAKtE,UAAU,cACb,kBAAC2E,EAAA,EAAD,CACEC,QAAQ,UACRxE,KAAK,KACLJ,UAAU,YACVK,QAAS,kBA1CG,SAAClD,GAC/Bd,EdiBK,CACL/C,KC1B0C,iCD2B1CC,QcnBoC4D,IACpCd,EAASkG,IAAiC,IAwCTqH,CAAwBzM,KAEvC,kBAAC,IAAD,OAEF,kBAACwH,EAAA,EAAD,CACEC,QAAQ,SACRxE,KAAK,KACLJ,UAAU,YACVK,QAAS,kBACPhE,EACEmG,IAAuB,EAAMrF,EAASjE,OAI1C,kBAAC,IAAD,cASd,kBAACmL,EAAA,EAAD,CAAKrE,UAAU,oBACb,kBAACsE,EAAA,EAAD,KACE,kBAACsE,EAAA,EAAD,CAASC,UAAU,SAASjE,QAAQ,gBCrFjCiF,OATf,WACE,OACE,oCACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KjBTE,IiBSkBC,UAAWC,KAC5C,kBAAC,IAAD,CAAOF,KjBTa,ciBSYC,UAAWE,OCMlCC,OAXf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAAC,GAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iCCNAC,GAA8B,CAClCrR,MAAO,GACPI,QAASV,EACTiG,O3BiCqD,CACrD/D,iBAAkB,GAClBC,kBAAmB,I2BlCnBG,kBAAc8D,GAuBDwL,OApBf,WAGkB,IAFhB/L,EAEe,uDAFP8L,GACRE,EACe,uCACf,OAAQA,EAAOtR,MACb,I3BjBqB,Y2BkBnB,OAAO,2BAAKsF,GAAZ,IAAmBvF,MAAOuR,EAAOrR,UACnC,I3BlB4B,mB2BmB1B,OAAO,2BAAKqF,GAAZ,IAAmBnF,QAASmR,EAAOrR,UACrC,I3BnB+B,sB2BoB7B,OAAO,2BAAKqF,GAAZ,IAAmBnF,QAASV,IAC9B,I3BpB4B,mB2BqB1B,OAAO,2BAAK6F,GAAZ,IAAmBI,OAAQ4L,EAAOrR,UACpC,I3BrB6B,oB2BsB3B,OAAO,2BAAKqF,GAAZ,IAAmBvD,aAAcuP,EAAOrR,UAC1C,QACE,OAAOqF,IC9BAiM,GAAsC,CACjD3R,GAAI,GACJC,KAAM,ICUFuR,GAA4B,CAChChE,YAAY,EACZjB,WAAY,CACVmB,kBAAkB,EAClBrB,aCR4B,CAC9BrM,GAAI,GACJiE,SAAU0N,GACV7M,UAAW,EACXC,iBAAkB,GAClBC,wBAAyB,GACzBC,OAAQ,EACRC,aAAc,EACdC,cAAe,KDEf0H,WnB2BoC,CACpC1D,oBAAoB,EACpBnJ,GAAI,ImB5BJwQ,gBAAgB,EAChBR,eAAgB,CACdS,sBAAsB,EACtBV,iBAAkB4B,IAEpBrB,enB+CwC,CACxCnH,oBAAoB,EACpBnJ,GAAI,KmBFS4R,OA5Cf,WAGgB,IAFdlM,EAEa,uDAFL8L,GACRE,EACa,uCACb,OAAQA,EAAOtR,MACb,InBpBiC,wBmBqB/B,OAAO,2BAAKsF,GAAZ,IAAmB8H,WAAYkE,EAAOrR,UACxC,InBpBF,mCmBqBI,OAAO,2BACFqF,GADL,IAEE6G,WAAW,2BAAM7G,EAAM6G,YAAb,IAAyBmB,iBAAkBgE,EAAOrR,YAEhE,InBxBsC,6BmByBpC,OAAO,2BACFqF,GADL,IAEE6G,WAAW,2BAAM7G,EAAM6G,YAAb,IAAyBF,aAAcqF,EAAOrR,YAE5D,InB5BiC,wBmB6B/B,OAAO,2BAAKqF,GAAZ,IAAmBmH,WAAY6E,EAAOrR,UACxC,InB5BqC,4BmB6BnC,OAAO,2BAAKqF,GAAZ,IAAmB8K,eAAgBkB,EAAOrR,UAC5C,InB5BF,uCmB6BI,OAAO,2BACFqF,GADL,IAEEsK,eAAe,2BACVtK,EAAMsK,gBADG,IAEZS,qBAAsBiB,EAAOrR,YAGnC,InBnC0C,iCmBoCxC,OAAO,2BACFqF,GADL,IAEEsK,eAAe,2BACVtK,EAAMsK,gBADG,IAEZD,iBAAkB2B,EAAOrR,YAG/B,InB1CqC,4BmB2CnC,OAAO,2BAAKqF,GAAZ,IAAmB4K,eAAgBoB,EAAOrR,UAC5C,QACE,OAAOqF,IElEP8L,GAAkC,CACtChI,WAAY,IAeCqI,OAZf,WAGsB,IAFpBnM,EAEmB,uDAFX8L,GACRE,EACmB,uCACnB,OAAQA,EAAOtR,MACb,I1BX0B,iB0BYxB,OAAO,2BAAKsF,GAAZ,IAAmB8D,WAAYkI,EAAOrR,UACxC,QACE,OAAOqF,ICVPoM,GAAcC,2BAAgB,CAClCpM,UAAWqM,GACXvI,eAAgBoI,GAChBvF,OAAQsF,KAKJK,GAAmBC,+BAAoB,IAM9BC,GAJDC,uBACZN,GACAG,GAAiBI,2BAAgBC,QCTnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,GAAD,UAKRO,SAASC,eAAe,SPsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.af4d5a41.chunk.js","sourcesContent":["export interface IdeaListState {\r\n  ideas: [];\r\n  filters: filterParamPayloadType;\r\n  search: { searchColumnName: string; searchColumnValue: string };\r\n  selectedDate: Date | undefined;\r\n}\r\n\r\nexport const SET_IDEAS = \"SET_IDEAS\";\r\nexport const SET_FILTER_PARAM = \"SET_FILTER_PARAM\";\r\nexport const REMOVE_FILTER_PARAM = \"REMOVE_FILTER_PARAM\";\r\nexport const SET_SEARCH_VALUE = \"SET_SEARCH_VALUE\";\r\nexport const SET_SELECTED_DATE = \"SET_SELECTED_DATE\";\r\n\r\ninterface setIdeasAction {\r\n  type: typeof SET_IDEAS;\r\n  payload: [];\r\n}\r\n\r\ninterface setFilterParamAction {\r\n  type: typeof SET_FILTER_PARAM;\r\n  payload: filterParamPayloadType;\r\n}\r\n\r\ninterface removeFilterParamAction {\r\n  type: typeof SET_FILTER_PARAM;\r\n  payload: any;\r\n}\r\n\r\ninterface searchAction {\r\n  type: typeof SET_SEARCH_VALUE;\r\n  payload: searchPayloadType;\r\n}\r\n\r\nexport type filterParamPayloadType = {\r\n  filterColumnName: string;\r\n  filterColumnValue: { id: string; name: string };\r\n};\r\n\r\nexport type searchPayloadType = {\r\n  searchColumnName: string;\r\n  searchColumnValue: string;\r\n};\r\n\r\nexport const defaultFilterParamPayload: filterParamPayloadType = {\r\n  filterColumnName: \"\",\r\n  filterColumnValue: { id: \"\", name: \"\" },\r\n};\r\n\r\nexport const defaultSearchPayload: searchPayloadType = {\r\n  searchColumnName: \"\",\r\n  searchColumnValue: \"\",\r\n};\r\n\r\ninterface setSelectedDateAction {\r\n  type: typeof SET_SEARCH_VALUE;\r\n  payload: Date | undefined;\r\n}\r\n\r\nexport type IdeaStateActionTypes =\r\n  | setIdeasAction\r\n  | setFilterParamAction\r\n  | removeFilterParamAction\r\n  | searchAction\r\n  | setSelectedDateAction;\r\n","import {\r\n  SET_IDEAS,\r\n  SET_FILTER_PARAM,\r\n  REMOVE_FILTER_PARAM,\r\n  searchPayloadType,\r\n  SET_SEARCH_VALUE,\r\n  SET_SELECTED_DATE,\r\n} from \"./types\";\r\nimport { IdeaModel } from \"../../firebase/models/IdeaModel\";\r\nimport { filterParamPayloadType } from \"./types\";\r\n\r\nexport function setIdeas(ideas: Array<IdeaModel>) {\r\n  return {\r\n    type: SET_IDEAS,\r\n    payload: ideas,\r\n  };\r\n}\r\n\r\nexport function setFilterParam(filters: filterParamPayloadType) {\r\n  return {\r\n    type: SET_FILTER_PARAM,\r\n    payload: filters,\r\n  };\r\n}\r\n\r\nexport function removeFilterParam() {\r\n  return {\r\n    type: REMOVE_FILTER_PARAM,\r\n    payload: {},\r\n  };\r\n}\r\n\r\nexport function setSearchValue(search: searchPayloadType) {\r\n  return {\r\n    type: SET_SEARCH_VALUE,\r\n    payload: search,\r\n  };\r\n}\r\n\r\nexport function setSelectedDate(date: Date | undefined) {\r\n  return {\r\n    type: SET_SELECTED_DATE,\r\n    payload: date,\r\n  };\r\n}\r\n","export const MAX_IDEAS_RATING = 10;\r\nexport const DEFAULT_FILTER_COLUMN = \"category\";\r\nexport const DEFAULT_SEARCH_COLUMN = \"shortenedName\";\r\n","import React, { createContext } from \"react\";\r\nimport app from \"firebase/app\";\r\nimport \"firebase/database\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setIdeas } from \"../redux-store/ideasList/actions\";\r\nimport { setCategories } from \"../redux-store/categoriesList/actions\";\r\nimport {\r\n  DEFAULT_FILTER_COLUMN,\r\n  DEFAULT_SEARCH_COLUMN,\r\n} from \"../shared/constants/variables\";\r\nimport { fromUnixTime, getUnixTime, endOfDay } from \"date-fns\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBctpD0Ti4XHjgZxJ1cLz2RzHONHatoJfs\",\r\n  authDomain: \"dex-daily-ideas-book.firebaseapp.com\",\r\n  databaseURL: \"https://dex-daily-ideas-book.firebaseio.com\",\r\n  projectId: \"dex-daily-ideas-book\",\r\n  storageBucket: \"dex-daily-ideas-book.appspot.com\",\r\n  messagingSenderId: \"705177915721\",\r\n  appId: \"1:705177915721:web:fd450bea60c0a8de62ca98\",\r\n  measurementId: \"G-4YD4XZN0C7\",\r\n};\r\n\r\nconst FirebaseContext = createContext(null);\r\nexport { FirebaseContext };\r\n\r\nexport default ({ children }) => {\r\n  let firebase = {\r\n    app: null,\r\n    database: null,\r\n  };\r\n\r\n  if (!app.apps.length) {\r\n    app.initializeApp(config);\r\n    firebase = {\r\n      app: app,\r\n      database: app.database(),\r\n\r\n      api: {\r\n        getIdeas,\r\n        postIdea,\r\n        putIdea,\r\n        deleteIdea,\r\n        getCategories,\r\n        postCategory,\r\n        putCategory,\r\n        deleteCategory,\r\n      },\r\n    };\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const dbRef = firebase.database;\r\n  const ideasRef = dbRef.ref(\"ideas\");\r\n  const categoriesRef = dbRef.ref(\"categories\");\r\n\r\n  getCategories();\r\n\r\n  function getIdeas(\r\n    filterColumnName,\r\n    filterColumnValueId,\r\n    searchColumnName,\r\n    searchColumnValue\r\n  ) {\r\n    ideasRef.off(\"value\");\r\n\r\n    const isFilterApplied =\r\n      filterColumnName !== \"\" && filterColumnValueId !== \"\";\r\n\r\n    if (isFilterApplied) {\r\n      if (filterColumnName === \"createdAt\") {\r\n        const selectedDate = fromUnixTime(filterColumnValueId);\r\n        const endOfTheDayTimestamp = getUnixTime(endOfDay(selectedDate));\r\n\r\n        ideasRef\r\n          .orderByChild(\r\n            filterColumnName ? filterColumnName : DEFAULT_FILTER_COLUMN\r\n          )\r\n          .startAt(Number(filterColumnValueId))\r\n          .endAt(Number(endOfTheDayTimestamp))\r\n          .on(\"value\", async (snapIdeas) => {\r\n            const items = snapIdeas.val();\r\n            const newItemsState = await aggregateIdeasAndCategories(items);\r\n            dispatch(setIdeas(newItemsState));\r\n          });\r\n      } else {\r\n        ideasRef\r\n          .orderByChild(\r\n            filterColumnName ? filterColumnName : DEFAULT_FILTER_COLUMN\r\n          )\r\n          .equalTo(filterColumnValueId)\r\n          .on(\"value\", async (snapIdeas) => {\r\n            const items = snapIdeas.val();\r\n            const newItemsState = await aggregateIdeasAndCategories(items);\r\n            dispatch(setIdeas(newItemsState));\r\n          });\r\n      }\r\n    } else {\r\n      ideasRef\r\n        .orderByChild(\r\n          searchColumnName ? searchColumnName : DEFAULT_SEARCH_COLUMN\r\n        )\r\n        .startAt(\r\n          searchColumnValue.toLowerCase() && searchColumnValue.toUpperCase()\r\n        )\r\n        .endAt(searchColumnValue + \"~\")\r\n        .on(\"value\", async (snapIdeas) => {\r\n          const items = snapIdeas.val();\r\n          const newItemsState = await aggregateIdeasAndCategories(items);\r\n          dispatch(setIdeas(newItemsState));\r\n        });\r\n    }\r\n  }\r\n\r\n  const aggregateIdeasAndCategories = async (items) => {\r\n    let newItemsState = [];\r\n\r\n    for (let item in items) {\r\n      const fieldById = items[item];\r\n      let categoryRef = dbRef.ref(\"categories\").child(fieldById.category);\r\n      await categoryRef.once(\"value\", (snapCategory) => {\r\n        const categoryName = snapCategory.val();\r\n        newItemsState.push({\r\n          id: item,\r\n          category: { ...categoryName, id: fieldById.category },\r\n          createdAt: fieldById.createdAt,\r\n          descriptionAbout: fieldById.descriptionAbout,\r\n          descriptionExpectations: fieldById.descriptionExpectations,\r\n          rating: fieldById.rating,\r\n          serialNumber: fieldById.serialNumber,\r\n          shortenedName: fieldById.shortenedName,\r\n        });\r\n      });\r\n    }\r\n    return newItemsState;\r\n  };\r\n\r\n  function getCategories() {\r\n    categoriesRef.off(\"value\");\r\n    categoriesRef.on(\"value\", (snap) => {\r\n      const items = snap.val();\r\n      let newItemsState = [];\r\n      for (let item in items) {\r\n        const fieldById = items[item];\r\n        newItemsState.push({\r\n          id: item,\r\n          name: fieldById.name,\r\n        });\r\n      }\r\n      dispatch(setCategories(newItemsState));\r\n    });\r\n  }\r\n\r\n  function postIdea(idea) {\r\n    ideasRef.push(idea);\r\n  }\r\n\r\n  function deleteIdea(id) {\r\n    ideasRef.child(id).remove();\r\n  }\r\n\r\n  function putIdea(idea) {\r\n    ideasRef.child(idea.id).update(idea);\r\n  }\r\n\r\n  function postCategory(category) {\r\n    categoriesRef.push(category);\r\n  }\r\n\r\n  function deleteCategory(id) {\r\n    categoriesRef.child(id).remove();\r\n  }\r\n\r\n  function putCategory(category) {\r\n    categoriesRef.child(category.id).update(category);\r\n  }\r\n\r\n  return (\r\n    <FirebaseContext.Provider value={firebase}>\r\n      {children}\r\n    </FirebaseContext.Provider>\r\n  );\r\n};\r\n","import { SET_CATEGORIES } from \"./types\";\r\nimport { CategoryModel } from \"../../firebase/models/CategoryModel\";\r\n\r\nexport function setCategories(categories: CategoryModel) {\r\n  return {\r\n    type: SET_CATEGORIES,\r\n    payload: categories,\r\n  };\r\n}\r\n","export interface CategoryListState {\r\n  categories: [];\r\n}\r\n\r\nexport const SET_CATEGORIES = \"SET_CATEGORIES\";\r\n\r\ninterface setCategoriesAction {\r\n  type: typeof SET_CATEGORIES;\r\n  payload: [];\r\n}\r\n\r\nexport type CategoryStateActionTypes = setCategoriesAction;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { Navbar, Nav, Form, FormControl, InputGroup } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as ROUTES from \"../../shared/constants/routes\";\r\nimport {\r\n  setSearchValue,\r\n  setFilterParam,\r\n  removeFilterParam,\r\n  setSelectedDate,\r\n} from \"../../redux-store/ideasList/actions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport { AppState } from \"../../redux-store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-date-picker\";\r\nimport { getUnixTime, format } from \"date-fns\";\r\nimport { FirebaseContext } from \"../../firebase/firebase\";\r\n\r\nfunction Navigation() {\r\n  const filters = useSelector((state: AppState) => state.ideasList.filters);\r\n  const { filterColumnName, filterColumnValue } = filters;\r\n  const { id: filterValueId } = filterColumnValue;\r\n\r\n  const searchValue = useSelector((state: AppState) => state.ideasList.search);\r\n  const { searchColumnName, searchColumnValue } = searchValue;\r\n\r\n  const selectedDate = useSelector(\r\n    (state: AppState) => state.ideasList.selectedDate\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { api }: any = useContext(FirebaseContext);\r\n\r\n  const isFilterApplied =\r\n    filterColumnName !== \"\" && filterColumnValue !== undefined;\r\n\r\n  let timer: NodeJS.Timeout;\r\n  const SEARCH_WAIT_INTERVAL = 650;\r\n  const SEARCH_COLUMN_NAME = \"shortenedName\";\r\n\r\n  const search = (columnName: any) => {\r\n    clearTimeout(timer);\r\n\r\n    timer = setTimeout(() => {\r\n      dispatch(\r\n        setSearchValue({\r\n          searchColumnName: SEARCH_COLUMN_NAME,\r\n          searchColumnValue: columnName,\r\n        })\r\n      );\r\n    }, SEARCH_WAIT_INTERVAL);\r\n  };\r\n\r\n  const filterByDate = (date: any) => {\r\n    dispatch(setSelectedDate(date));\r\n    const timestampString = getUnixTime(date).toString();\r\n    dispatch(\r\n      setFilterParam({\r\n        filterColumnName: \"createdAt\",\r\n        filterColumnValue: {\r\n          name: format(date, \"dd/LL/yyyy\"),\r\n          id: timestampString,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const resetCalendarDate = () => {\r\n    dispatch(removeFilterParam());\r\n    dispatch(setSelectedDate(undefined));\r\n  };\r\n\r\n  useEffect(() => {\r\n    api.getIdeas(\r\n      filterColumnName,\r\n      filterValueId,\r\n      searchColumnName,\r\n      searchColumnValue\r\n    );\r\n  }, [\r\n    api,\r\n    filterColumnName,\r\n    filterValueId,\r\n    searchColumnName,\r\n    searchColumnValue,\r\n  ]);\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\">\r\n      <Navbar.Brand as={Link} to={ROUTES.IDEAS}>\r\n        DailyIdeasBook\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link as={Link} to={ROUTES.IDEAS}>\r\n            Ideas\r\n          </Nav.Link>\r\n          <Nav.Link as={Link} to={ROUTES.CATEGORIES}>\r\n            Categories\r\n          </Nav.Link>\r\n        </Nav>\r\n        <Form inline>\r\n          {isFilterApplied && selectedDate && (\r\n            <Icon.XCircle\r\n              role=\"button\"\r\n              className=\"text-danger\"\r\n              size={20}\r\n              onClick={() => resetCalendarDate()}\r\n            />\r\n          )}\r\n\r\n          <DatePicker\r\n            onChange={(date) => filterByDate(date)}\r\n            value={selectedDate}\r\n            maxDate={new Date()}\r\n            className=\"mx-lg-2 ml-auto\"\r\n            clearIcon={null}\r\n          />\r\n\r\n          <InputGroup className=\"py-2\">\r\n            <FormControl\r\n              type=\"text\"\r\n              placeholder=\"Search by idea title...\"\r\n              onChange={(e: any) => search(e.target.value)}\r\n              disabled={isFilterApplied}\r\n            />\r\n            <InputGroup.Append>\r\n              <InputGroup.Text>\r\n                <Icon.Search />\r\n              </InputGroup.Text>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </Form>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","export const IDEAS = \"/\";\r\nexport const CATEGORIES = \"/categories\";\r\n","import * as Yup from \"yup\";\r\n\r\nexport const ideaValidationSchema = Yup.object({\r\n  descriptionAbout: Yup.string().max(300).label(\"Description about\").required(),\r\n  descriptionExpectations: Yup.string()\r\n    .max(200)\r\n    .label(\"Description expectations\")\r\n    .required(),\r\n  shortenedName: Yup.string().max(30).label(\"Shortened name\").required(),\r\n  rating: Yup.number().min(1).max(10).label(\"Rating\").required(),\r\n  category: Yup.string().label(\"Category\").required(),\r\n});\r\n\r\nexport const categoryValidationSchema = Yup.object({\r\n  name: Yup.string().label(\"Name\").required(),\r\n});\r\n","import {\r\n  SET_INSERT_IDEA_MODAL,\r\n  SET_UPDATE_IDEA_MODAL_VISIBILITY,\r\n  SET_UPDATE_IDEA_MODAL_DATA,\r\n  SET_REMOVE_IDEA_MODAL,\r\n  SET_INSERT_CATEGORY_MODAL,\r\n  SET_UPDATE_CATEGORY_MODAL_VISIBILITY,\r\n  SET_UPDATE_CATEGORY_MODAL_DATA,\r\n  SET_REMOVE_CATEGORY_MODAL,\r\n} from \"./types\";\r\nimport { IdeaModel } from \"../../firebase/models/IdeaModel\";\r\nimport { CategoryModel } from \"../../firebase/models/CategoryModel\";\r\n\r\nexport function setInsertIdeaModal(visibility: boolean) {\r\n  return {\r\n    type: SET_INSERT_IDEA_MODAL,\r\n    payload: visibility,\r\n  };\r\n}\r\nexport function setUpdateIdeaModalVisibility(visibility: boolean) {\r\n  return {\r\n    type: SET_UPDATE_IDEA_MODAL_VISIBILITY,\r\n    payload: visibility,\r\n  };\r\n}\r\nexport function setUpdateIdeaModalData(data: IdeaModel) {\r\n  return {\r\n    type: SET_UPDATE_IDEA_MODAL_DATA,\r\n    payload: data,\r\n  };\r\n}\r\nexport function setRemoveIdeaModal(visibility: boolean, id: string) {\r\n  return {\r\n    type: SET_REMOVE_IDEA_MODAL,\r\n    payload: { isRemoveModalShown: visibility, id },\r\n  };\r\n}\r\n\r\nexport function setInsertCategoryModal(visibility: boolean) {\r\n  return {\r\n    type: SET_INSERT_CATEGORY_MODAL,\r\n    payload: visibility,\r\n  };\r\n}\r\nexport function setUpdateCategoryModalVisibility(visibility: boolean) {\r\n  return {\r\n    type: SET_UPDATE_CATEGORY_MODAL_VISIBILITY,\r\n    payload: visibility,\r\n  };\r\n}\r\nexport function setUpdateCategoryModalData(data: CategoryModel) {\r\n  return {\r\n    type: SET_UPDATE_CATEGORY_MODAL_DATA,\r\n    payload: data,\r\n  };\r\n}\r\nexport function setRemoveCategoryModal(visibility: boolean, id: string) {\r\n  return {\r\n    type: SET_REMOVE_CATEGORY_MODAL,\r\n    payload: { isRemoveModalShown: visibility, id },\r\n  };\r\n}\r\n","import { IdeaModel } from \"./../../firebase/models/IdeaModel\";\r\nimport { CategoryModel } from \"../../firebase/models/CategoryModel\";\r\nexport interface ModalsState {\r\n  insertIdea: boolean;\r\n  updateIdea: {\r\n    isIdeaModalShown: boolean;\r\n    selectedIdea: IdeaModel;\r\n  };\r\n  removeIdea: removeIdeaModel;\r\n  insertCategory: boolean;\r\n  updateCategory: {\r\n    isCategoryModalShown: boolean;\r\n    selectedCategory: CategoryModel;\r\n  };\r\n  removeCategory: removeCategoryModel;\r\n}\r\n\r\nexport const SET_INSERT_IDEA_MODAL = \"SET_INSERT_IDEA_MODAL\";\r\nexport const SET_UPDATE_IDEA_MODAL_VISIBILITY =\r\n  \"SET_UPDATE_IDEA_MODAL_VISIBILITY\";\r\nexport const SET_UPDATE_IDEA_MODAL_DATA = \"SET_UPDATE_IDEA_MODAL_DATA\";\r\nexport const SET_REMOVE_IDEA_MODAL = \"SET_REMOVE_IDEA_MODAL\";\r\n\r\nexport const SET_INSERT_CATEGORY_MODAL = \"SET_INSERT_CATEGORY_MODAL\";\r\nexport const SET_UPDATE_CATEGORY_MODAL_VISIBILITY =\r\n  \"SET_UPDATE_CATEGORY_MODAL_VISIBILITY\";\r\nexport const SET_UPDATE_CATEGORY_MODAL_DATA = \"SET_UPDATE_CATEGORY_MODAL_DATA\";\r\nexport const SET_REMOVE_CATEGORY_MODAL = \"SET_REMOVE_CATEGORY_MODAL\";\r\n\r\ninterface setInsertIdeaModalAction {\r\n  type: typeof SET_INSERT_IDEA_MODAL;\r\n  payload: boolean;\r\n}\r\ninterface setUpdateIdeaModalVisibilityAction {\r\n  type: typeof SET_UPDATE_IDEA_MODAL_VISIBILITY;\r\n  payload: boolean;\r\n}\r\ninterface setUpdateIdeaModalDataAction {\r\n  type: typeof SET_UPDATE_IDEA_MODAL_DATA;\r\n  payload: IdeaModel;\r\n}\r\ninterface setRemoveIdeaModalAction {\r\n  type: typeof SET_REMOVE_IDEA_MODAL;\r\n  payload: removeIdeaModel;\r\n}\r\n\r\nexport type removeIdeaModel = {\r\n  isRemoveModalShown: boolean;\r\n  id: string;\r\n};\r\nexport const defaultRemoveIdeaModel = {\r\n  isRemoveModalShown: false,\r\n  id: \"\",\r\n};\r\n\r\ninterface setInsertCategoryModalAction {\r\n  type: typeof SET_INSERT_CATEGORY_MODAL;\r\n  payload: boolean;\r\n}\r\ninterface setUpdateCategoryModalVisibilityAction {\r\n  type: typeof SET_UPDATE_CATEGORY_MODAL_VISIBILITY;\r\n  payload: boolean;\r\n}\r\ninterface setUpdateCategoryModalDataAction {\r\n  type: typeof SET_UPDATE_CATEGORY_MODAL_DATA;\r\n  payload: CategoryModel;\r\n}\r\ninterface setRemoveCategoryModalAction {\r\n  type: typeof SET_REMOVE_CATEGORY_MODAL;\r\n  payload: removeCategoryModel;\r\n}\r\n\r\nexport type removeCategoryModel = {\r\n  isRemoveModalShown: boolean;\r\n  id: string;\r\n};\r\nexport const defaultRemoveCategoryModel = {\r\n  isRemoveModalShown: false,\r\n  id: \"\",\r\n};\r\n\r\nexport type ModalsStateActionTypes =\r\n  | setInsertIdeaModalAction\r\n  | setUpdateIdeaModalVisibilityAction\r\n  | setUpdateIdeaModalDataAction\r\n  | setRemoveIdeaModalAction\r\n  | setInsertCategoryModalAction\r\n  | setUpdateCategoryModalVisibilityAction\r\n  | setUpdateCategoryModalDataAction\r\n  | setRemoveCategoryModalAction;\r\n","import React, { useContext } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\r\nimport { ideaValidationSchema } from \"../../shared/validation-schemas\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppState } from \"../../redux-store\";\r\nimport { FirebaseContext } from \"../../firebase/firebase\";\r\nimport { CategoryModel } from \"../../firebase/models/CategoryModel\";\r\nimport { setInsertIdeaModal } from \"../../redux-store/modals/actions\";\r\nimport { getUnixTime } from \"date-fns\";\r\nimport StarRatingComponent from \"react-star-rating-component\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport { MAX_IDEAS_RATING } from \"./../../shared/constants/variables\";\r\n\r\nfunction IdeaForm() {\r\n  const categories = useSelector(\r\n    (state: AppState) => state.categoriesList.categories\r\n  );\r\n  const ideas = useSelector((state: AppState) => state.ideasList.ideas);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { api }: any = useContext(FirebaseContext);\r\n\r\n  const addIdea = (idea: any) => {\r\n    const completeObject = {\r\n      ...idea,\r\n      createdAt: getUnixTime(new Date()),\r\n      serialNumber: ideas.length + 1,\r\n    };\r\n    api.postIdea(completeObject);\r\n    dispatch(setInsertIdeaModal(false));\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        descriptionAbout: \"\",\r\n        descriptionExpectations: \"\",\r\n        shortenedName: \"\",\r\n        rating: 1,\r\n        category: \"\",\r\n      }}\r\n      validationSchema={ideaValidationSchema}\r\n      onSubmit={(values) => {\r\n        addIdea(values);\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        dirty,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        setFieldValue,\r\n        isValid,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Description of idea</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={3}\r\n              placeholder=\"Describe idea\"\r\n              className=\"my-1 mr-sm-2\"\r\n              name=\"descriptionAbout\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.descriptionAbout}\r\n              isValid={touched.descriptionAbout && !errors.descriptionAbout}\r\n              isInvalid={!!errors.descriptionAbout}\r\n            />\r\n            {errors.descriptionAbout && (\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.descriptionAbout}\r\n              </Form.Control.Feedback>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Expectations</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={2}\r\n              placeholder=\"Describe what do you expect from idea\"\r\n              className=\"my-1 mr-sm-2 mh-0\"\r\n              name=\"descriptionExpectations\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.descriptionExpectations}\r\n              isValid={\r\n                touched.descriptionExpectations &&\r\n                !errors.descriptionExpectations\r\n              }\r\n              isInvalid={!!errors.descriptionExpectations}\r\n            />\r\n            {errors.descriptionExpectations && (\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.descriptionExpectations}\r\n              </Form.Control.Feedback>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Shortened name</Form.Label>\r\n            <Form.Control\r\n              placeholder=\"Shortened name\"\r\n              className=\"my-1 mr-sm-2\"\r\n              name=\"shortenedName\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.shortenedName}\r\n              isValid={touched.shortenedName && !errors.shortenedName}\r\n              isInvalid={!!errors.shortenedName}\r\n            />\r\n            {errors.shortenedName && (\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shortenedName}\r\n              </Form.Control.Feedback>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Category</Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              name=\"category\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.category}\r\n              isValid={touched.category && !errors.category}\r\n              isInvalid={!!errors.category}\r\n            >\r\n              <option value=\"\" disabled>\r\n                Select category\r\n              </option>\r\n              {categories.map((option: CategoryModel, i) => {\r\n                return (\r\n                  <option key={i} value={option.id}>\r\n                    {option.name}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Form.Control>\r\n\r\n            {errors.category && (\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.category}\r\n              </Form.Control.Feedback>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Rating</Form.Label>\r\n            <Row>\r\n              <Col>\r\n                <StarRatingComponent\r\n                  starCount={MAX_IDEAS_RATING}\r\n                  name=\"rating\"\r\n                  value={values.rating}\r\n                  renderStarIcon={() => (\r\n                    <Icon.StarFill size={20} className=\"mx-1\" />\r\n                  )}\r\n                  onStarClick={(number) => setFieldValue(\"rating\", number)}\r\n                />\r\n                <small className=\"font-italic f-sm-right\">\r\n                  {values.rating}/{MAX_IDEAS_RATING}\r\n                </small>\r\n              </Col>\r\n            </Row>\r\n          </Form.Group>\r\n          <Button\r\n            className=\"float-right\"\r\n            variant=\"light\"\r\n            onClick={() => dispatch(setInsertIdeaModal(false))}\r\n          >\r\n            Close\r\n          </Button>\r\n          <Button\r\n            className=\"float-right mx-2\"\r\n            type=\"submit\"\r\n            disabled={!(isValid && dirty)}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default IdeaForm;\r\n","import React from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport InsertIdeaForm from \"./InsertIdeaForm\";\r\n\r\nfunction InsertIdeaModal(props: { show: boolean; onHide: any }) {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Insert new idea\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <InsertIdeaForm />\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default InsertIdeaModal;\r\n","import React, { useContext } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\r\nimport { ideaValidationSchema } from \"../../shared/validation-schemas\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppState } from \"../../redux-store\";\r\nimport { FirebaseContext } from \"../../firebase/firebase\";\r\nimport { CategoryModel } from \"../../firebase/models/CategoryModel\";\r\nimport { setUpdateIdeaModalVisibility } from \"../../redux-store/modals/actions\";\r\nimport { getUnixTime } from \"date-fns\";\r\nimport StarRatingComponent from \"react-star-rating-component\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport { MAX_IDEAS_RATING } from \"./../../shared/constants/variables\";\r\n\r\nfunction IdeaForm() {\r\n  const categories = useSelector(\r\n    (state: AppState) => state.categoriesList.categories\r\n  );\r\n  const ideas = useSelector((state: AppState) => state.ideasList.ideas);\r\n  const selectedIdea = useSelector(\r\n    (state: AppState) => state.modals.updateIdea.selectedIdea\r\n  );\r\n  const {\r\n    id: selectedIdeaId,\r\n    descriptionAbout,\r\n    descriptionExpectations,\r\n    shortenedName,\r\n    rating,\r\n    category,\r\n  } = selectedIdea;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { api }: any = useContext(FirebaseContext);\r\n\r\n  const updateIdea = (idea: any) => {\r\n    const completeObject = {\r\n      ...idea,\r\n      id: selectedIdeaId,\r\n      createdAt: getUnixTime(new Date()),\r\n      serialNumber: ideas.length + 1,\r\n    };\r\n    api.putIdea(completeObject);\r\n    dispatch(setUpdateIdeaModalVisibility(false));\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        descriptionAbout: descriptionAbout,\r\n        descriptionExpectations: descriptionExpectations,\r\n        shortenedName: shortenedName,\r\n        rating: rating,\r\n        category: category.id,\r\n      }}\r\n      validationSchema={ideaValidationSchema}\r\n      onSubmit={(values) => {\r\n        updateIdea(values);\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        dirty,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        setFieldValue,\r\n        isValid,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Description of idea</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={3}\r\n              placeholder=\"Describe idea\"\r\n              className=\"my-1 mr-sm-2\"\r\n              name=\"descriptionAbout\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.descriptionAbout}\r\n              isValid={touched.descriptionAbout && !errors.descriptionAbout}\r\n              isInvalid={!!errors.descriptionAbout}\r\n            />\r\n            {errors.descriptionAbout && (\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.descriptionAbout}\r\n              </Form.Control.Feedback>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Expectations</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={2}\r\n              placeholder=\"Describe what do you expect from idea\"\r\n              className=\"my-1 mr-sm-2\"\r\n              name=\"descriptionExpectations\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.descriptionExpectations}\r\n              isValid={\r\n                touched.descriptionExpectations &&\r\n                !errors.descriptionExpectations\r\n              }\r\n              isInvalid={!!errors.descriptionExpectations}\r\n            />\r\n            {errors.descriptionExpectations && (\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.descriptionExpectations}\r\n              </Form.Control.Feedback>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Shortened name</Form.Label>\r\n            <Form.Control\r\n              placeholder=\"Shortened name\"\r\n              className=\"my-1 mr-sm-2\"\r\n              name=\"shortenedName\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.shortenedName}\r\n              isValid={touched.shortenedName && !errors.shortenedName}\r\n              isInvalid={!!errors.shortenedName}\r\n            />\r\n            {errors.shortenedName && (\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shortenedName}\r\n              </Form.Control.Feedback>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Category</Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              name=\"category\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.category}\r\n              isValid={touched.category && !errors.category}\r\n              isInvalid={!!errors.category}\r\n            >\r\n              <option value=\"\" disabled>\r\n                Select category\r\n              </option>\r\n              {categories.map((option: CategoryModel, i) => {\r\n                return (\r\n                  <option key={i} value={option.id}>\r\n                    {option.name}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Form.Control>\r\n\r\n            {errors.category && (\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.category}\r\n              </Form.Control.Feedback>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Rating</Form.Label>\r\n            <Row>\r\n              <Col>\r\n                <StarRatingComponent\r\n                  starCount={MAX_IDEAS_RATING}\r\n                  name=\"rating\"\r\n                  value={values.rating}\r\n                  renderStarIcon={() => (\r\n                    <Icon.StarFill size={20} className=\"mx-1\" />\r\n                  )}\r\n                  onStarClick={(number) => setFieldValue(\"rating\", number)}\r\n                />\r\n                <small className=\"font-italic f-sm-right\">\r\n                  {values.rating}/{MAX_IDEAS_RATING}\r\n                </small>\r\n              </Col>\r\n            </Row>\r\n          </Form.Group>\r\n          <Button\r\n            className=\"float-right\"\r\n            variant=\"light\"\r\n            onClick={() => dispatch(setUpdateIdeaModalVisibility(false))}\r\n          >\r\n            Close\r\n          </Button>\r\n          <Button\r\n            className=\"float-right mx-2\"\r\n            type=\"submit\"\r\n            disabled={!(isValid && dirty)}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default IdeaForm;\r\n","import React from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport UpdateIdeaForm from \"./UpdateIdeaForm\";\r\n\r\nfunction UpdateIdeaModal(props: { show: boolean; onHide: any }) {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Update idea\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <UpdateIdeaForm />\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default UpdateIdeaModal;\r\n","import React, { useContext } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport { FirebaseContext } from \"../../firebase/firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppState } from \"../../redux-store\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setRemoveIdeaModal } from \"../../redux-store/modals/actions\";\r\n\r\nfunction RemoveIdeaConfirmationModal(props: { show: boolean; onHide: any }) {\r\n  const removeIdeaId = useSelector(\r\n    (state: AppState) => state.modals.removeIdea.id\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { api }: any = useContext(FirebaseContext);\r\n\r\n  const removeIdea = (id: string) => {\r\n    api.deleteIdea(id);\r\n    dispatch(setRemoveIdeaModal(false, \"\"));\r\n  };\r\n  return (\r\n    <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Are you sure?\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"float-right\">\r\n          <Button\r\n            variant=\"danger\"\r\n            className=\"mx-2\"\r\n            onClick={() => removeIdea(removeIdeaId as string)}\r\n          >\r\n            Confirm\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            className=\"mx-2\"\r\n            onClick={() => dispatch(setRemoveIdeaModal(false, \"\"))}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default RemoveIdeaConfirmationModal;\r\n","import React, { useContext } from \"react\";\r\nimport AccordionContext from \"react-bootstrap/AccordionContext\";\r\nimport { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nconst ContextAwareToggle = (props: any) => {\r\n  const { children, eventKey, callback } = props;\r\n  const currentEventKey = useContext(AccordionContext);\r\n\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey)\r\n  );\r\n\r\n  const isCurrentEventKey = currentEventKey === eventKey;\r\n\r\n  return (\r\n    <Button\r\n      variant={isCurrentEventKey ? \"outline-secondary\" : \"light\"}\r\n      className=\"text-primary\"\r\n      onClick={decoratedOnClick}\r\n    >\r\n      {children}\r\n      {isCurrentEventKey ? (\r\n        <Icon.ArrowUp size={20} />\r\n      ) : (\r\n        <Icon.ArrowDown size={20} />\r\n      )}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ContextAwareToggle;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  Row,\r\n  Col,\r\n  Spinner,\r\n  Button,\r\n  Badge,\r\n  Accordion,\r\n  Tooltip,\r\n  OverlayTrigger,\r\n} from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppState } from \"../../redux-store\";\r\nimport { FirebaseContext } from \"../../firebase/firebase\";\r\nimport { IdeaModel } from \"../../firebase/models/IdeaModel\";\r\nimport { fromUnixTime, format } from \"date-fns\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport \"./style.css\";\r\nimport InsertIdeaModal from \"../InsertIdeaModal\";\r\nimport UpdateIdeaModal from \"../UpdateIdeaModal\";\r\nimport RemoveIdeaModal from \"../RemoveIdeaConfirmationModal\";\r\nimport {\r\n  setInsertIdeaModal,\r\n  setUpdateIdeaModalVisibility,\r\n  setUpdateIdeaModalData,\r\n  setRemoveIdeaModal,\r\n} from \"../../redux-store/modals/actions\";\r\nimport StarRatingComponent from \"react-star-rating-component\";\r\nimport { MAX_IDEAS_RATING } from \"../../shared/constants/variables\";\r\nimport ContextAwareToggle from \"./ContextAwareToggle\";\r\nimport {\r\n  setFilterParam,\r\n  removeFilterParam,\r\n  setSelectedDate,\r\n} from \"./../../redux-store/ideasList/actions\";\r\n\r\nfunction IdeaBar() {\r\n  const ideas = useSelector((state: AppState) => state.ideasList.ideas);\r\n\r\n  const isInsertModalShown = useSelector(\r\n    (state: AppState) => state.modals.insertIdea\r\n  );\r\n  const isUpdateModalShown = useSelector(\r\n    (state: AppState) => state.modals.updateIdea.isIdeaModalShown\r\n  );\r\n  const isRemoveModalShown = useSelector(\r\n    (state: AppState) => state.modals.removeIdea.isRemoveModalShown\r\n  );\r\n  const filters = useSelector((state: AppState) => state.ideasList.filters);\r\n  const { filterColumnName, filterColumnValue } = filters;\r\n  const { name: filterValueName, id: filterValueId } = filterColumnValue;\r\n\r\n  const searchValue = useSelector((state: AppState) => state.ideasList.search);\r\n  const { searchColumnName, searchColumnValue } = searchValue;\r\n\r\n  const isSearchApplied = searchColumnName !== \"\" && searchColumnValue !== \"\";\r\n  const isFilterApplied =\r\n    filterColumnName !== \"\" && filterColumnValue !== undefined;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { api }: any = useContext(FirebaseContext);\r\n\r\n  const formatCreateDate = (timestamp: number) =>\r\n    format(fromUnixTime(timestamp), \"do MMM, yyyy hh:mm a\");\r\n\r\n  const renderTooltip = (props: any) => (\r\n    <Tooltip id=\"button-tooltip\" {...props}>\r\n      {props.title}\r\n    </Tooltip>\r\n  );\r\n\r\n  const categoryColors: Record<string, string> = {\r\n    Education: \"danger\",\r\n    \"Personal life\": \"success\",\r\n    Work: \"dark\",\r\n    Entertainment: \"info\",\r\n    Travel: \"warning\",\r\n  };\r\n\r\n  const showUpdateIdeaModal = (idea: any) => {\r\n    dispatch(setUpdateIdeaModalData(idea));\r\n    dispatch(setUpdateIdeaModalVisibility(true));\r\n  };\r\n\r\n  const filterByCategory = (categoryName: string, categoryId?: string) => {\r\n    dispatch(setSelectedDate(undefined));\r\n    dispatch(\r\n      setFilterParam({\r\n        filterColumnName: \"category\",\r\n        filterColumnValue: {\r\n          name: categoryName,\r\n          id: categoryId ? categoryId : \"\",\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    api.getIdeas(\r\n      filterColumnName,\r\n      filterValueId,\r\n      searchColumnName,\r\n      searchColumnValue\r\n    );\r\n  }, [\r\n    api,\r\n    filterColumnName,\r\n    filterValueId,\r\n    searchColumnName,\r\n    searchColumnValue,\r\n  ]);\r\n  return (\r\n    <>\r\n      <InsertIdeaModal\r\n        show={isInsertModalShown}\r\n        onHide={() => dispatch(setInsertIdeaModal(false))}\r\n      />\r\n\r\n      <UpdateIdeaModal\r\n        show={isUpdateModalShown}\r\n        onHide={() => dispatch(setUpdateIdeaModalVisibility(false))}\r\n      />\r\n\r\n      <RemoveIdeaModal\r\n        show={isRemoveModalShown}\r\n        onHide={() => dispatch(setRemoveIdeaModal(false, \"\"))}\r\n      />\r\n\r\n      {filterValueName && (\r\n        <div className=\"mt-2\">\r\n          <span>Filter {filterColumnName} by: </span>\r\n          <Badge variant=\"light\">\r\n            <span>{filterValueName}</span>\r\n            <Icon.DashCircleFill\r\n              role=\"button\"\r\n              className=\"text-danger ml-1 align-middle\"\r\n              onClick={() => {\r\n                dispatch(removeFilterParam());\r\n                dispatch(setSelectedDate(undefined));\r\n              }}\r\n              size={12}\r\n            />\r\n          </Badge>\r\n        </div>\r\n      )}\r\n\r\n      <Button\r\n        onClick={() => dispatch(setInsertIdeaModal(true))}\r\n        className=\"fixed-bottom insert-idea-button\"\r\n      >\r\n        <Icon.PlusCircle size={31} /> Insert idea\r\n      </Button>\r\n\r\n      {ideas.length > 0 ? (\r\n        <Accordion defaultActiveKey=\"-1\">\r\n          {ideas.map((idea: IdeaModel, i) => {\r\n            const {\r\n              id: ideaId,\r\n              createdAt,\r\n              shortenedName,\r\n              category,\r\n              rating,\r\n              descriptionAbout,\r\n              descriptionExpectations,\r\n            } = idea;\r\n            const { id: categoryId, name: categoryName } = category;\r\n            return (\r\n              <Card key={i} className=\"my-3 border-bottom\" border=\"success\">\r\n                <Card.Header>\r\n                  <Row className=\"align-items-center\">\r\n                    <Col xs={2}>\r\n                      <footer className=\"blockquote-footer\">\r\n                        Created at: {createdAt && formatCreateDate(createdAt)}\r\n                      </footer>\r\n                    </Col>\r\n                    <Col\r\n                      xs={3}\r\n                      className=\"text-center text-secondary font-weight-bold text\"\r\n                    >\r\n                      {shortenedName}\r\n                    </Col>\r\n                    <Col lg={2} xs={3} className=\"text-danger text-center\">\r\n                      <OverlayTrigger\r\n                        placement=\"top\"\r\n                        delay={{ show: 150, hide: 90 }}\r\n                        overlay={renderTooltip({\r\n                          title: \"Filter by \" + categoryName,\r\n                        })}\r\n                      >\r\n                        <Badge\r\n                          onClick={() =>\r\n                            !isSearchApplied &&\r\n                            filterByCategory(categoryName, categoryId)\r\n                          }\r\n                          className={\"btn btn-\" + categoryColors[categoryName]}\r\n                        >\r\n                          {categoryName}\r\n                        </Badge>\r\n                      </OverlayTrigger>\r\n                    </Col>\r\n                    <Col xs={2} sm={3} className=\"text-right d-block d-lg-none\">\r\n                      <StarRatingComponent\r\n                        starCount={1}\r\n                        name=\"show_rating_mobile\"\r\n                        value={rating / MAX_IDEAS_RATING}\r\n                        renderStarIcon={() => (\r\n                          <div className=\"d-inline-block rating-mobile\">\r\n                            <Icon.StarFill size={20} className=\"mx-1\" />{\" \"}\r\n                            <span>{rating}</span>\r\n                          </div>\r\n                        )}\r\n                        editing={false}\r\n                      />\r\n                    </Col>\r\n                    <Col xs={4} className=\"text-center d-none d-lg-block\">\r\n                      <StarRatingComponent\r\n                        starCount={MAX_IDEAS_RATING}\r\n                        name=\"show_rating\"\r\n                        value={rating}\r\n                        renderStarIcon={() => (\r\n                          <Icon.StarFill size={12} className=\"mx-1\" />\r\n                        )}\r\n                        editing={false}\r\n                      />\r\n                    </Col>\r\n                    <Col xs={1}>\r\n                      <ContextAwareToggle eventKey={i.toString()} />\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey={i.toString()}>\r\n                  <Card.Body>\r\n                    <Row>\r\n                      <Col>\r\n                        <h5>Description</h5>\r\n                        <p>{descriptionAbout}</p>\r\n                      </Col>\r\n                      <Col>\r\n                        <h5>Expectations</h5>\r\n                        <p>{descriptionExpectations}</p>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col className=\"text-right\">\r\n                        <OverlayTrigger\r\n                          placement=\"top\"\r\n                          delay={{ show: 150, hide: 90 }}\r\n                          overlay={renderTooltip({ title: \"Modify\" })}\r\n                        >\r\n                          <Button\r\n                            variant=\"success\"\r\n                            size=\"sm\"\r\n                            className=\"mx-1 my-1\"\r\n                            onClick={() => showUpdateIdeaModal(idea)}\r\n                          >\r\n                            <Icon.Pencil /> Modify\r\n                          </Button>\r\n                        </OverlayTrigger>\r\n                        <OverlayTrigger\r\n                          placement=\"top\"\r\n                          delay={{ show: 150, hide: 100 }}\r\n                          overlay={renderTooltip({ title: \"Remove\" })}\r\n                        >\r\n                          <Button\r\n                            variant=\"danger\"\r\n                            size=\"sm\"\r\n                            className=\"mx-1 my-1\"\r\n                            onClick={() =>\r\n                              dispatch(\r\n                                setRemoveIdeaModal(true, ideaId as string)\r\n                              )\r\n                            }\r\n                          >\r\n                            <Icon.Trash /> Remove\r\n                          </Button>\r\n                        </OverlayTrigger>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            );\r\n          })}\r\n        </Accordion>\r\n      ) : (\r\n        <Row className=\"text-center my-4\">\r\n          <Col>\r\n            {isSearchApplied || isFilterApplied ? (\r\n              <p>There are no ideas for those criteria.</p>\r\n            ) : (\r\n              <Spinner animation=\"border\" variant=\"success\" />\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default IdeaBar;\r\n","import React, { useContext } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { categoryValidationSchema } from \"../../shared/validation-schemas\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FirebaseContext } from \"../../firebase/firebase\";\r\nimport { setInsertCategoryModal } from \"../../redux-store/modals/actions\";\r\nimport { CategoryModel } from \"../../firebase/models/CategoryModel\";\r\n\r\nfunction CategoryForm() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { api }: any = useContext(FirebaseContext);\r\n\r\n  const addCategory = (category: CategoryModel) => {\r\n    api.postCategory(category);\r\n    dispatch(setInsertCategoryModal(false));\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n      }}\r\n      validationSchema={categoryValidationSchema}\r\n      onSubmit={(values) => {\r\n        addCategory(values);\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        dirty,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isValid,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Name of category</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Name\"\r\n              className=\"my-1 mr-sm-2\"\r\n              name=\"name\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.name}\r\n              isValid={touched.name && !errors.name}\r\n              isInvalid={!!errors.name}\r\n            />\r\n            {errors.name && (\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.name}\r\n              </Form.Control.Feedback>\r\n            )}\r\n          </Form.Group>\r\n          <Button\r\n            className=\"float-right\"\r\n            variant=\"light\"\r\n            onClick={() => dispatch(setInsertCategoryModal(false))}\r\n          >\r\n            Close\r\n          </Button>\r\n          <Button\r\n            className=\"float-right mx-2\"\r\n            type=\"submit\"\r\n            disabled={!(isValid && dirty)}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default CategoryForm;\r\n","import React from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport InsertCategoryForm from \"./InsertCategoryForm\";\r\n\r\nfunction InsertCategoryModal(props: { show: boolean; onHide: any }) {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Insert new category\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <InsertCategoryForm />\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default InsertCategoryModal;\r\n","import React, { useContext } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { categoryValidationSchema } from \"../../shared/validation-schemas\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppState } from \"../../redux-store\";\r\nimport { FirebaseContext } from \"../../firebase/firebase\";\r\nimport { setUpdateCategoryModalVisibility } from \"../../redux-store/modals/actions\";\r\nimport { CategoryModel } from \"../../firebase/models/CategoryModel\";\r\n\r\nfunction CategoryForm() {\r\n  const selectedCategory = useSelector(\r\n    (state: AppState) => state.modals.updateCategory.selectedCategory\r\n  );\r\n  const { id: selectedCategoryId, name } = selectedCategory;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { api }: any = useContext(FirebaseContext);\r\n\r\n  const updateCategory = (category: CategoryModel) => {\r\n    const completeObject = {\r\n      ...category,\r\n      id: selectedCategoryId,\r\n    };\r\n    api.putCategory(completeObject);\r\n    dispatch(setUpdateCategoryModalVisibility(false));\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: name,\r\n      }}\r\n      validationSchema={categoryValidationSchema}\r\n      onSubmit={(values) => {\r\n        updateCategory(values);\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        dirty,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isValid,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Name of category</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Name\"\r\n              className=\"my-1 mr-sm-2\"\r\n              name=\"name\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.name}\r\n              isValid={touched.name && !errors.name}\r\n              isInvalid={!!errors.name}\r\n            />\r\n            {errors.name && (\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.name}\r\n              </Form.Control.Feedback>\r\n            )}\r\n          </Form.Group>\r\n          <Button\r\n            className=\"float-right\"\r\n            variant=\"light\"\r\n            onClick={() => dispatch(setUpdateCategoryModalVisibility(false))}\r\n          >\r\n            Close\r\n          </Button>\r\n          <Button\r\n            className=\"float-right mx-2\"\r\n            type=\"submit\"\r\n            disabled={!(isValid && dirty)}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default CategoryForm;\r\n","import React from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport UpdateCategoryForm from \"./UpdateCategoryForm\";\r\n\r\nfunction UpdateCategoryModal(props: { show: boolean; onHide: any }) {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Update category\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <UpdateCategoryForm />\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default UpdateCategoryModal;\r\n","import React, { useContext } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport { FirebaseContext } from \"../../firebase/firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppState } from \"../../redux-store\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setRemoveCategoryModal } from \"../../redux-store/modals/actions\";\r\n\r\nfunction RemoveCategoryConfirmationModal(props: {\r\n  show: boolean;\r\n  onHide: any;\r\n}) {\r\n  const removeCategoryId = useSelector(\r\n    (state: AppState) => state.modals.removeCategory.id\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { api }: any = useContext(FirebaseContext);\r\n\r\n  const removeCategory = (id: string) => {\r\n    api.deleteCategory(id);\r\n    dispatch(setRemoveCategoryModal(false, \"\"));\r\n  };\r\n  return (\r\n    <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Are you sure?\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"float-right\">\r\n          <Button\r\n            variant=\"danger\"\r\n            className=\"mx-2\"\r\n            onClick={() => removeCategory(removeCategoryId as string)}\r\n          >\r\n            Confirm\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            className=\"mx-2\"\r\n            onClick={() => dispatch(setRemoveCategoryModal(false, \"\"))}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default RemoveCategoryConfirmationModal;\r\n","import React from \"react\";\r\nimport { Card, Row, Col, Spinner, Button } from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppState } from \"../../redux-store\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport \"./style.css\";\r\nimport InsertCategoryModal from \"../InsertCategoryModal\";\r\nimport UpdateCategoryModal from \"../UpdateCategoryModal\";\r\nimport RemoveCategoryModal from \"../RemoveCategoryConfirmationModal\";\r\nimport {\r\n  setInsertCategoryModal,\r\n  setUpdateCategoryModalVisibility,\r\n  setUpdateCategoryModalData,\r\n  setRemoveCategoryModal,\r\n} from \"../../redux-store/modals/actions\";\r\nimport { CategoryModel } from \"../../firebase/models/CategoryModel\";\r\n\r\nfunction CategoryBar() {\r\n  const categories = useSelector(\r\n    (state: AppState) => state.categoriesList.categories\r\n  );\r\n\r\n  const isInsertModalShown = useSelector(\r\n    (state: AppState) => state.modals.insertCategory\r\n  );\r\n  const isUpdateModalShown = useSelector(\r\n    (state: AppState) => state.modals.updateCategory.isCategoryModalShown\r\n  );\r\n  const isRemoveModalShown = useSelector(\r\n    (state: AppState) => state.modals.removeCategory.isRemoveModalShown\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const showUpdateCategoryModal = (category: any) => {\r\n    dispatch(setUpdateCategoryModalData(category));\r\n    dispatch(setUpdateCategoryModalVisibility(true));\r\n  };\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => dispatch(setInsertCategoryModal(true))}\r\n        className=\"fixed-bottom insert-category-button\"\r\n      >\r\n        <Icon.PlusCircle size={31} /> Insert category\r\n      </Button>\r\n\r\n      <InsertCategoryModal\r\n        show={isInsertModalShown}\r\n        onHide={() => dispatch(setInsertCategoryModal(false))}\r\n      />\r\n\r\n      <UpdateCategoryModal\r\n        show={isUpdateModalShown}\r\n        onHide={() => dispatch(setUpdateCategoryModalVisibility(false))}\r\n      />\r\n\r\n      <RemoveCategoryModal\r\n        show={isRemoveModalShown}\r\n        onHide={() => dispatch(setRemoveCategoryModal(false, \"\"))}\r\n      />\r\n\r\n      {categories.length > 0 ? (\r\n        categories.map((category: CategoryModel, i) => {\r\n          return (\r\n            <Card key={i} className=\"my-3\" border=\"warning\">\r\n              <Card.Header>\r\n                <Row>\r\n                  <Col>\r\n                    <span>{category.name}</span>\r\n                  </Col>\r\n                  <Col className=\"text-right\">\r\n                    <Button\r\n                      variant=\"success\"\r\n                      size=\"sm\"\r\n                      className=\"mx-1 my-1\"\r\n                      onClick={() => showUpdateCategoryModal(category)}\r\n                    >\r\n                      <Icon.Pencil />\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"danger\"\r\n                      size=\"sm\"\r\n                      className=\"mx-1 my-1\"\r\n                      onClick={() =>\r\n                        dispatch(\r\n                          setRemoveCategoryModal(true, category.id as string)\r\n                        )\r\n                      }\r\n                    >\r\n                      <Icon.Trash />\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </Card.Header>\r\n            </Card>\r\n          );\r\n        })\r\n      ) : (\r\n        <Row className=\"text-center my-4\">\r\n          <Col>\r\n            <Spinner animation=\"border\" variant=\"success\" />\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CategoryBar;\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport * as ROUTES from \"../../shared/constants/routes\";\r\nimport IdeasList from \"../IdeasList\";\r\nimport CategoriesList from \"../CategoriesList\";\r\n\r\nfunction Routes() {\r\n  return (\r\n    <>\r\n      <Route exact path={ROUTES.IDEAS} component={IdeasList} />\r\n      <Route path={ROUTES.CATEGORIES} component={CategoriesList} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Navigation from \"../Navigation\";\r\nimport Routes from \"./Routes\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <Container>\r\n        <Routes />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  IdeaListState,\r\n  SET_IDEAS,\r\n  SET_FILTER_PARAM,\r\n  REMOVE_FILTER_PARAM,\r\n  SET_SEARCH_VALUE,\r\n  IdeaStateActionTypes,\r\n  defaultFilterParamPayload,\r\n  defaultSearchPayload,\r\n  SET_SELECTED_DATE,\r\n} from \"./types\";\r\n\r\nconst initialState: IdeaListState = {\r\n  ideas: [],\r\n  filters: defaultFilterParamPayload,\r\n  search: defaultSearchPayload,\r\n  selectedDate: undefined,\r\n};\r\n\r\nfunction ideasReducer(\r\n  state = initialState,\r\n  action: IdeaStateActionTypes\r\n): IdeaListState {\r\n  switch (action.type as any) {\r\n    case SET_IDEAS:\r\n      return { ...state, ideas: action.payload };\r\n    case SET_FILTER_PARAM:\r\n      return { ...state, filters: action.payload };\r\n    case REMOVE_FILTER_PARAM:\r\n      return { ...state, filters: defaultFilterParamPayload };\r\n    case SET_SEARCH_VALUE:\r\n      return { ...state, search: action.payload };\r\n    case SET_SELECTED_DATE:\r\n      return { ...state, selectedDate: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default ideasReducer;\r\n","export type CategoryModel = {\r\n  id?: string;\r\n  name: string;\r\n};\r\n\r\nexport const defaultCategoryModel: CategoryModel = {\r\n  id: \"\",\r\n  name: \"\",\r\n};\r\n","import {\r\n  ModalsState,\r\n  SET_INSERT_IDEA_MODAL,\r\n  SET_UPDATE_IDEA_MODAL_VISIBILITY,\r\n  SET_UPDATE_IDEA_MODAL_DATA,\r\n  SET_REMOVE_IDEA_MODAL,\r\n  SET_INSERT_CATEGORY_MODAL,\r\n  SET_UPDATE_CATEGORY_MODAL_VISIBILITY,\r\n  SET_UPDATE_CATEGORY_MODAL_DATA,\r\n  SET_REMOVE_CATEGORY_MODAL,\r\n  ModalsStateActionTypes,\r\n  defaultRemoveIdeaModel,\r\n  defaultRemoveCategoryModel,\r\n} from \"./types\";\r\nimport { defaultIdeaModel } from \"../../firebase/models/IdeaModel\";\r\nimport { defaultCategoryModel } from \"../../firebase/models/CategoryModel\";\r\n\r\nconst initialState: ModalsState = {\r\n  insertIdea: false,\r\n  updateIdea: {\r\n    isIdeaModalShown: false,\r\n    selectedIdea: defaultIdeaModel,\r\n  },\r\n  removeIdea: defaultRemoveIdeaModel,\r\n  insertCategory: false,\r\n  updateCategory: {\r\n    isCategoryModalShown: false,\r\n    selectedCategory: defaultCategoryModel,\r\n  },\r\n  removeCategory: defaultRemoveCategoryModel,\r\n};\r\n\r\nfunction modalsReducer(\r\n  state = initialState,\r\n  action: ModalsStateActionTypes\r\n): ModalsState {\r\n  switch (action.type) {\r\n    case SET_INSERT_IDEA_MODAL:\r\n      return { ...state, insertIdea: action.payload };\r\n    case SET_UPDATE_IDEA_MODAL_VISIBILITY:\r\n      return {\r\n        ...state,\r\n        updateIdea: { ...state.updateIdea, isIdeaModalShown: action.payload },\r\n      };\r\n    case SET_UPDATE_IDEA_MODAL_DATA:\r\n      return {\r\n        ...state,\r\n        updateIdea: { ...state.updateIdea, selectedIdea: action.payload },\r\n      };\r\n    case SET_REMOVE_IDEA_MODAL:\r\n      return { ...state, removeIdea: action.payload };\r\n    case SET_INSERT_CATEGORY_MODAL:\r\n      return { ...state, insertCategory: action.payload };\r\n    case SET_UPDATE_CATEGORY_MODAL_VISIBILITY:\r\n      return {\r\n        ...state,\r\n        updateCategory: {\r\n          ...state.updateCategory,\r\n          isCategoryModalShown: action.payload,\r\n        },\r\n      };\r\n    case SET_UPDATE_CATEGORY_MODAL_DATA:\r\n      return {\r\n        ...state,\r\n        updateCategory: {\r\n          ...state.updateCategory,\r\n          selectedCategory: action.payload,\r\n        },\r\n      };\r\n    case SET_REMOVE_CATEGORY_MODAL:\r\n      return { ...state, removeCategory: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default modalsReducer;\r\n","import { CategoryModel, defaultCategoryModel } from \"./CategoryModel\";\r\n\r\nexport type IdeaModel = {\r\n  id?: string;\r\n  category: CategoryModel;\r\n  createdAt?: number;\r\n  descriptionAbout: string;\r\n  descriptionExpectations: string;\r\n  rating: number;\r\n  serialNumber?: number;\r\n  shortenedName: string;\r\n};\r\n\r\nexport const defaultIdeaModel = {\r\n  id: \"\",\r\n  category: defaultCategoryModel,\r\n  createdAt: 0,\r\n  descriptionAbout: \"\",\r\n  descriptionExpectations: \"\",\r\n  rating: 0,\r\n  serialNumber: 0,\r\n  shortenedName: \"\",\r\n};\r\n","import {\r\n  CategoryListState,\r\n  SET_CATEGORIES,\r\n  CategoryStateActionTypes,\r\n} from \"./types\";\r\n\r\nconst initialState: CategoryListState = {\r\n  categories: [],\r\n};\r\n\r\nfunction categoriesReducer(\r\n  state = initialState,\r\n  action: CategoryStateActionTypes\r\n): CategoryListState {\r\n  switch (action.type) {\r\n    case SET_CATEGORIES:\r\n      return { ...state, categories: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default categoriesReducer;\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { combineReducers } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport ideasListReducer from \"./../redux-store/ideasList/reducers\";\r\nimport modalsReducer from \"./modals/reducers\";\r\nimport categoriesReducer from \"./categoriesList/reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  ideasList: ideasListReducer,\r\n  categoriesList: categoriesReducer,\r\n  modals: modalsReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nconst composeEnhancers = composeWithDevTools({});\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux-store\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport FirebaseProvider from \"./firebase/firebase\";\nimport \"react-bootstrap/dist/react-bootstrap.min.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <FirebaseProvider>\n        <Router>\n          <App />\n        </Router>\n      </FirebaseProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}